Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> declarations
Rule 2     declarations -> declaration declarations
Rule 3     declarations -> declaration
Rule 4     declaration -> LET ID LPAREN params RPAREN COLON type ASSIGN fun_body
Rule 5     declaration -> LET ID COLON type ASSIGN var_body
Rule 6     var_body -> expression
Rule 7     var_body -> block
Rule 8     var_body -> statement_list
Rule 9     fun_body -> statement_list
Rule 10    fun_body -> block
Rule 11    block -> LPAREN statement_list RPAREN
Rule 12    statement_list -> statement SEMICOLON statement_list
Rule 13    statement_list -> statement_no_semicolon
Rule 14    statement -> declaration
Rule 15    statement -> command
Rule 16    statement -> expression
Rule 17    statement_no_semicolon -> declaration
Rule 18    statement_no_semicolon -> command
Rule 19    statement_no_semicolon -> expression
Rule 20    params -> param_list
Rule 21    params -> empty
Rule 22    param_list -> ID COMMA param_list
Rule 23    param_list -> ID
Rule 24    type -> ID
Rule 25    type -> type LBRACK RBRACK
Rule 26    type -> type ARROW type
Rule 27    type -> LPAREN type_list RPAREN
Rule 28    type_list -> type COMMA type_list
Rule 29    type_list -> type
Rule 30    command -> WHILE expression DO simple_expr
Rule 31    command -> WHILE expression DO block
Rule 32    command -> SET lvalue ASSIGN expression
Rule 33    simple_expr -> command
Rule 34    simple_expr -> expression
Rule 35    expression -> IF expression THEN simple_expr
Rule 36    expression -> IF expression THEN block
Rule 37    expression -> IF expression THEN LPAREN statement_list RPAREN
Rule 38    expression -> IF expression THEN simple_expr ELSE simple_expr
Rule 39    expression -> IF expression THEN simple_expr ELSE block
Rule 40    expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
Rule 41    expression -> IF expression THEN block ELSE simple_expr
Rule 42    expression -> IF expression THEN block ELSE block
Rule 43    expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN
Rule 44    expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
Rule 45    expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block
Rule 46    expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
Rule 47    expression -> expression PLUS expression
Rule 48    expression -> expression MINUS expression
Rule 49    expression -> expression TIMES expression
Rule 50    expression -> expression DIVIDE expression
Rule 51    expression -> expression MOD expression
Rule 52    expression -> expression POW expression
Rule 53    expression -> expression EQ expression
Rule 54    expression -> expression NEQ expression
Rule 55    expression -> expression LT expression
Rule 56    expression -> expression LE expression
Rule 57    expression -> expression GT expression
Rule 58    expression -> expression GE expression
Rule 59    expression -> expression AND expression
Rule 60    expression -> expression OR expression
Rule 61    expression -> MINUS expression
Rule 62    expression -> NOT expression
Rule 63    expression -> LPAREN command RPAREN
Rule 64    expression -> INT_LITERAL
Rule 65    expression -> STRING_LITERAL
Rule 66    expression -> TRUE
Rule 67    expression -> FALSE
Rule 68    expression -> UNIT
Rule 69    expression -> NULL
Rule 70    expression -> LPAREN expression RPAREN
Rule 71    expression -> ID LPAREN args RPAREN
Rule 72    args -> expression COMMA args
Rule 73    args -> expression
Rule 74    expression -> NEW type LBRACK expression PIPE expression RBRACK
Rule 75    expression -> NEW type LBRACK expression PIPE command RBRACK
Rule 76    expression -> expression LBRACK expression RBRACK
Rule 77    expression -> ID
Rule 78    lvalue -> ID
Rule 79    lvalue -> lvalue LBRACK expression RBRACK
Rule 80    empty -> <empty>

Terminals, with rules where they appear

AND                  : 59
ARROW                : 26
ASSIGN               : 4 5 32
COLON                : 4 5
COMMA                : 22 28 72
DIVIDE               : 50
DO                   : 30 31
ELSE                 : 38 39 40 41 42 43 44 45 46
EQ                   : 53
FALSE                : 67
GE                   : 58
GT                   : 57
ID                   : 4 5 22 23 24 71 77 78
IF                   : 35 36 37 38 39 40 41 42 43 44 45 46
INT_LITERAL          : 64
LBRACK               : 25 74 75 76 79
LE                   : 56
LET                  : 4 5
LPAREN               : 4 11 27 37 40 43 44 45 46 46 63 70 71
LT                   : 55
MINUS                : 48 61
MOD                  : 51
NEQ                  : 54
NEW                  : 74 75
NOT                  : 62
NULL                 : 69
OR                   : 60
PIPE                 : 74 75
PLUS                 : 47
POW                  : 52
RBRACK               : 25 74 75 76 79
RPAREN               : 4 11 27 37 40 43 44 45 46 46 63 70 71
SEMICOLON            : 12
SET                  : 32
STRING_LITERAL       : 65
THEN                 : 35 36 37 38 39 40 41 42 43 44 45 46
TIMES                : 49
TRUE                 : 66
UNIT                 : 68
WHILE                : 30 31
error                : 

Nonterminals, with rules where they appear

args                 : 71 72
block                : 7 10 31 36 39 41 42 42 43 45
command              : 15 18 33 63 75
declaration          : 2 3 14 17
declarations         : 1 2
empty                : 21
expression           : 6 16 19 30 31 32 34 35 36 37 38 39 40 41 42 43 44 45 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 62 70 72 73 74 74 75 76 76 79
fun_body             : 4
lvalue               : 32 79
param_list           : 20 22
params               : 4
program              : 0
simple_expr          : 30 35 38 38 39 40 41 44
statement            : 12
statement_list       : 8 9 11 12 37 40 43 44 45 46 46
statement_no_semicolon : 13
type                 : 4 5 25 26 26 28 29 74 75
type_list            : 27 28
var_body             : 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declarations
    (2) declarations -> . declaration declarations
    (3) declarations -> . declaration
    (4) declaration -> . LET ID LPAREN params RPAREN COLON type ASSIGN fun_body
    (5) declaration -> . LET ID COLON type ASSIGN var_body

    LET             shift and go to state 4

    program                        shift and go to state 1
    declarations                   shift and go to state 2
    declaration                    shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> declarations .

    $end            reduce using rule 1 (program -> declarations .)


state 3

    (2) declarations -> declaration . declarations
    (3) declarations -> declaration .
    (2) declarations -> . declaration declarations
    (3) declarations -> . declaration
    (4) declaration -> . LET ID LPAREN params RPAREN COLON type ASSIGN fun_body
    (5) declaration -> . LET ID COLON type ASSIGN var_body

    $end            reduce using rule 3 (declarations -> declaration .)
    LET             shift and go to state 4

    declaration                    shift and go to state 3
    declarations                   shift and go to state 5

state 4

    (4) declaration -> LET . ID LPAREN params RPAREN COLON type ASSIGN fun_body
    (5) declaration -> LET . ID COLON type ASSIGN var_body

    ID              shift and go to state 6


state 5

    (2) declarations -> declaration declarations .

    $end            reduce using rule 2 (declarations -> declaration declarations .)


state 6

    (4) declaration -> LET ID . LPAREN params RPAREN COLON type ASSIGN fun_body
    (5) declaration -> LET ID . COLON type ASSIGN var_body

    LPAREN          shift and go to state 7
    COLON           shift and go to state 8


state 7

    (4) declaration -> LET ID LPAREN . params RPAREN COLON type ASSIGN fun_body
    (20) params -> . param_list
    (21) params -> . empty
    (22) param_list -> . ID COMMA param_list
    (23) param_list -> . ID
    (80) empty -> .

    ID              shift and go to state 9
    RPAREN          reduce using rule 80 (empty -> .)

    params                         shift and go to state 10
    param_list                     shift and go to state 11
    empty                          shift and go to state 12

state 8

    (5) declaration -> LET ID COLON . type ASSIGN var_body
    (24) type -> . ID
    (25) type -> . type LBRACK RBRACK
    (26) type -> . type ARROW type
    (27) type -> . LPAREN type_list RPAREN

    ID              shift and go to state 13
    LPAREN          shift and go to state 15

    type                           shift and go to state 14

state 9

    (22) param_list -> ID . COMMA param_list
    (23) param_list -> ID .

    COMMA           shift and go to state 16
    RPAREN          reduce using rule 23 (param_list -> ID .)


state 10

    (4) declaration -> LET ID LPAREN params . RPAREN COLON type ASSIGN fun_body

    RPAREN          shift and go to state 17


state 11

    (20) params -> param_list .

    RPAREN          reduce using rule 20 (params -> param_list .)


state 12

    (21) params -> empty .

    RPAREN          reduce using rule 21 (params -> empty .)


state 13

    (24) type -> ID .

    ASSIGN          reduce using rule 24 (type -> ID .)
    LBRACK          reduce using rule 24 (type -> ID .)
    ARROW           reduce using rule 24 (type -> ID .)
    COMMA           reduce using rule 24 (type -> ID .)
    RPAREN          reduce using rule 24 (type -> ID .)


state 14

    (5) declaration -> LET ID COLON type . ASSIGN var_body
    (25) type -> type . LBRACK RBRACK
    (26) type -> type . ARROW type

    ASSIGN          shift and go to state 18
    LBRACK          shift and go to state 19
    ARROW           shift and go to state 20


state 15

    (27) type -> LPAREN . type_list RPAREN
    (28) type_list -> . type COMMA type_list
    (29) type_list -> . type
    (24) type -> . ID
    (25) type -> . type LBRACK RBRACK
    (26) type -> . type ARROW type
    (27) type -> . LPAREN type_list RPAREN

    ID              shift and go to state 13
    LPAREN          shift and go to state 15

    type_list                      shift and go to state 21
    type                           shift and go to state 22

state 16

    (22) param_list -> ID COMMA . param_list
    (22) param_list -> . ID COMMA param_list
    (23) param_list -> . ID

    ID              shift and go to state 9

    param_list                     shift and go to state 23

state 17

    (4) declaration -> LET ID LPAREN params RPAREN . COLON type ASSIGN fun_body

    COLON           shift and go to state 24


state 18

    (5) declaration -> LET ID COLON type ASSIGN . var_body
    (6) var_body -> . expression
    (7) var_body -> . block
    (8) var_body -> . statement_list
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID
    (11) block -> . LPAREN statement_list RPAREN
    (12) statement_list -> . statement SEMICOLON statement_list
    (13) statement_list -> . statement_no_semicolon
    (14) statement -> . declaration
    (15) statement -> . command
    (16) statement -> . expression
    (17) statement_no_semicolon -> . declaration
    (18) statement_no_semicolon -> . command
    (19) statement_no_semicolon -> . expression
    (4) declaration -> . LET ID LPAREN params RPAREN COLON type ASSIGN fun_body
    (5) declaration -> . LET ID COLON type ASSIGN var_body
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 31
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41
    LET             shift and go to state 4
    WHILE           shift and go to state 45
    SET             shift and go to state 46

    var_body                       shift and go to state 26
    expression                     shift and go to state 27
    block                          shift and go to state 28
    statement_list                 shift and go to state 29
    command                        shift and go to state 34
    statement                      shift and go to state 42
    statement_no_semicolon         shift and go to state 43
    declaration                    shift and go to state 44

state 19

    (25) type -> type LBRACK . RBRACK

    RBRACK          shift and go to state 47


state 20

    (26) type -> type ARROW . type
    (24) type -> . ID
    (25) type -> . type LBRACK RBRACK
    (26) type -> . type ARROW type
    (27) type -> . LPAREN type_list RPAREN

    ID              shift and go to state 13
    LPAREN          shift and go to state 15

    type                           shift and go to state 48

state 21

    (27) type -> LPAREN type_list . RPAREN

    RPAREN          shift and go to state 49


state 22

    (28) type_list -> type . COMMA type_list
    (29) type_list -> type .
    (25) type -> type . LBRACK RBRACK
    (26) type -> type . ARROW type

    COMMA           shift and go to state 50
    RPAREN          reduce using rule 29 (type_list -> type .)
    LBRACK          shift and go to state 19
    ARROW           shift and go to state 20


state 23

    (22) param_list -> ID COMMA param_list .

    RPAREN          reduce using rule 22 (param_list -> ID COMMA param_list .)


state 24

    (4) declaration -> LET ID LPAREN params RPAREN COLON . type ASSIGN fun_body
    (24) type -> . ID
    (25) type -> . type LBRACK RBRACK
    (26) type -> . type ARROW type
    (27) type -> . LPAREN type_list RPAREN

    ID              shift and go to state 13
    LPAREN          shift and go to state 15

    type                           shift and go to state 51

state 25

    (71) expression -> ID . LPAREN args RPAREN
    (77) expression -> ID .

    LPAREN          shift and go to state 52
    PLUS            reduce using rule 77 (expression -> ID .)
    MINUS           reduce using rule 77 (expression -> ID .)
    TIMES           reduce using rule 77 (expression -> ID .)
    DIVIDE          reduce using rule 77 (expression -> ID .)
    MOD             reduce using rule 77 (expression -> ID .)
    POW             reduce using rule 77 (expression -> ID .)
    EQ              reduce using rule 77 (expression -> ID .)
    NEQ             reduce using rule 77 (expression -> ID .)
    LT              reduce using rule 77 (expression -> ID .)
    LE              reduce using rule 77 (expression -> ID .)
    GT              reduce using rule 77 (expression -> ID .)
    GE              reduce using rule 77 (expression -> ID .)
    AND             reduce using rule 77 (expression -> ID .)
    OR              reduce using rule 77 (expression -> ID .)
    LBRACK          reduce using rule 77 (expression -> ID .)
    LET             reduce using rule 77 (expression -> ID .)
    $end            reduce using rule 77 (expression -> ID .)
    SEMICOLON       reduce using rule 77 (expression -> ID .)
    RPAREN          reduce using rule 77 (expression -> ID .)
    THEN            reduce using rule 77 (expression -> ID .)
    DO              reduce using rule 77 (expression -> ID .)
    COMMA           reduce using rule 77 (expression -> ID .)
    RBRACK          reduce using rule 77 (expression -> ID .)
    ELSE            reduce using rule 77 (expression -> ID .)
    PIPE            reduce using rule 77 (expression -> ID .)


state 26

    (5) declaration -> LET ID COLON type ASSIGN var_body .

    LET             reduce using rule 5 (declaration -> LET ID COLON type ASSIGN var_body .)
    $end            reduce using rule 5 (declaration -> LET ID COLON type ASSIGN var_body .)
    SEMICOLON       reduce using rule 5 (declaration -> LET ID COLON type ASSIGN var_body .)
    RPAREN          reduce using rule 5 (declaration -> LET ID COLON type ASSIGN var_body .)


state 27

    (6) var_body -> expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK
    (16) statement -> expression .
    (19) statement_no_semicolon -> expression .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 6 (var_body -> expression .)
  ! reduce/reduce conflict for LET resolved using rule 6 (var_body -> expression .)
  ! reduce/reduce conflict for $end resolved using rule 6 (var_body -> expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 6 (var_body -> expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 6 (var_body -> expression .)
    LET             reduce using rule 6 (var_body -> expression .)
    $end            reduce using rule 6 (var_body -> expression .)
    SEMICOLON       reduce using rule 6 (var_body -> expression .)
    RPAREN          reduce using rule 6 (var_body -> expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    LBRACK          shift and go to state 67

  ! SEMICOLON       [ reduce using rule 16 (statement -> expression .) ]
  ! LET             [ reduce using rule 19 (statement_no_semicolon -> expression .) ]
  ! $end            [ reduce using rule 19 (statement_no_semicolon -> expression .) ]
  ! SEMICOLON       [ reduce using rule 19 (statement_no_semicolon -> expression .) ]
  ! RPAREN          [ reduce using rule 19 (statement_no_semicolon -> expression .) ]


state 28

    (7) var_body -> block .

    LET             reduce using rule 7 (var_body -> block .)
    $end            reduce using rule 7 (var_body -> block .)
    SEMICOLON       reduce using rule 7 (var_body -> block .)
    RPAREN          reduce using rule 7 (var_body -> block .)


state 29

    (8) var_body -> statement_list .

    LET             reduce using rule 8 (var_body -> statement_list .)
    $end            reduce using rule 8 (var_body -> statement_list .)
    SEMICOLON       reduce using rule 8 (var_body -> statement_list .)
    RPAREN          reduce using rule 8 (var_body -> statement_list .)


state 30

    (35) expression -> IF . expression THEN simple_expr
    (36) expression -> IF . expression THEN block
    (37) expression -> IF . expression THEN LPAREN statement_list RPAREN
    (38) expression -> IF . expression THEN simple_expr ELSE simple_expr
    (39) expression -> IF . expression THEN simple_expr ELSE block
    (40) expression -> IF . expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> IF . expression THEN block ELSE simple_expr
    (42) expression -> IF . expression THEN block ELSE block
    (43) expression -> IF . expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> IF . expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> IF . expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> IF . expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 68

state 31

    (63) expression -> LPAREN . command RPAREN
    (70) expression -> LPAREN . expression RPAREN
    (11) block -> LPAREN . statement_list RPAREN
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID
    (12) statement_list -> . statement SEMICOLON statement_list
    (13) statement_list -> . statement_no_semicolon
    (14) statement -> . declaration
    (15) statement -> . command
    (16) statement -> . expression
    (17) statement_no_semicolon -> . declaration
    (18) statement_no_semicolon -> . command
    (19) statement_no_semicolon -> . expression
    (4) declaration -> . LET ID LPAREN params RPAREN COLON type ASSIGN fun_body
    (5) declaration -> . LET ID COLON type ASSIGN var_body

    WHILE           shift and go to state 45
    SET             shift and go to state 46
    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41
    LET             shift and go to state 4

    command                        shift and go to state 70
    expression                     shift and go to state 71
    statement_list                 shift and go to state 72
    statement                      shift and go to state 42
    statement_no_semicolon         shift and go to state 43
    declaration                    shift and go to state 44

state 32

    (61) expression -> MINUS . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 73

state 33

    (62) expression -> NOT . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 74

state 34

    (15) statement -> command .
    (18) statement_no_semicolon -> command .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 15 (statement -> command .)
    SEMICOLON       reduce using rule 15 (statement -> command .)
    LET             reduce using rule 18 (statement_no_semicolon -> command .)
    $end            reduce using rule 18 (statement_no_semicolon -> command .)
    RPAREN          reduce using rule 18 (statement_no_semicolon -> command .)

  ! SEMICOLON       [ reduce using rule 18 (statement_no_semicolon -> command .) ]


state 35

    (64) expression -> INT_LITERAL .

    PLUS            reduce using rule 64 (expression -> INT_LITERAL .)
    MINUS           reduce using rule 64 (expression -> INT_LITERAL .)
    TIMES           reduce using rule 64 (expression -> INT_LITERAL .)
    DIVIDE          reduce using rule 64 (expression -> INT_LITERAL .)
    MOD             reduce using rule 64 (expression -> INT_LITERAL .)
    POW             reduce using rule 64 (expression -> INT_LITERAL .)
    EQ              reduce using rule 64 (expression -> INT_LITERAL .)
    NEQ             reduce using rule 64 (expression -> INT_LITERAL .)
    LT              reduce using rule 64 (expression -> INT_LITERAL .)
    LE              reduce using rule 64 (expression -> INT_LITERAL .)
    GT              reduce using rule 64 (expression -> INT_LITERAL .)
    GE              reduce using rule 64 (expression -> INT_LITERAL .)
    AND             reduce using rule 64 (expression -> INT_LITERAL .)
    OR              reduce using rule 64 (expression -> INT_LITERAL .)
    LBRACK          reduce using rule 64 (expression -> INT_LITERAL .)
    LET             reduce using rule 64 (expression -> INT_LITERAL .)
    $end            reduce using rule 64 (expression -> INT_LITERAL .)
    SEMICOLON       reduce using rule 64 (expression -> INT_LITERAL .)
    RPAREN          reduce using rule 64 (expression -> INT_LITERAL .)
    THEN            reduce using rule 64 (expression -> INT_LITERAL .)
    DO              reduce using rule 64 (expression -> INT_LITERAL .)
    COMMA           reduce using rule 64 (expression -> INT_LITERAL .)
    RBRACK          reduce using rule 64 (expression -> INT_LITERAL .)
    ELSE            reduce using rule 64 (expression -> INT_LITERAL .)
    PIPE            reduce using rule 64 (expression -> INT_LITERAL .)


state 36

    (65) expression -> STRING_LITERAL .

    PLUS            reduce using rule 65 (expression -> STRING_LITERAL .)
    MINUS           reduce using rule 65 (expression -> STRING_LITERAL .)
    TIMES           reduce using rule 65 (expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 65 (expression -> STRING_LITERAL .)
    MOD             reduce using rule 65 (expression -> STRING_LITERAL .)
    POW             reduce using rule 65 (expression -> STRING_LITERAL .)
    EQ              reduce using rule 65 (expression -> STRING_LITERAL .)
    NEQ             reduce using rule 65 (expression -> STRING_LITERAL .)
    LT              reduce using rule 65 (expression -> STRING_LITERAL .)
    LE              reduce using rule 65 (expression -> STRING_LITERAL .)
    GT              reduce using rule 65 (expression -> STRING_LITERAL .)
    GE              reduce using rule 65 (expression -> STRING_LITERAL .)
    AND             reduce using rule 65 (expression -> STRING_LITERAL .)
    OR              reduce using rule 65 (expression -> STRING_LITERAL .)
    LBRACK          reduce using rule 65 (expression -> STRING_LITERAL .)
    LET             reduce using rule 65 (expression -> STRING_LITERAL .)
    $end            reduce using rule 65 (expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 65 (expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 65 (expression -> STRING_LITERAL .)
    THEN            reduce using rule 65 (expression -> STRING_LITERAL .)
    DO              reduce using rule 65 (expression -> STRING_LITERAL .)
    COMMA           reduce using rule 65 (expression -> STRING_LITERAL .)
    RBRACK          reduce using rule 65 (expression -> STRING_LITERAL .)
    ELSE            reduce using rule 65 (expression -> STRING_LITERAL .)
    PIPE            reduce using rule 65 (expression -> STRING_LITERAL .)


state 37

    (66) expression -> TRUE .

    PLUS            reduce using rule 66 (expression -> TRUE .)
    MINUS           reduce using rule 66 (expression -> TRUE .)
    TIMES           reduce using rule 66 (expression -> TRUE .)
    DIVIDE          reduce using rule 66 (expression -> TRUE .)
    MOD             reduce using rule 66 (expression -> TRUE .)
    POW             reduce using rule 66 (expression -> TRUE .)
    EQ              reduce using rule 66 (expression -> TRUE .)
    NEQ             reduce using rule 66 (expression -> TRUE .)
    LT              reduce using rule 66 (expression -> TRUE .)
    LE              reduce using rule 66 (expression -> TRUE .)
    GT              reduce using rule 66 (expression -> TRUE .)
    GE              reduce using rule 66 (expression -> TRUE .)
    AND             reduce using rule 66 (expression -> TRUE .)
    OR              reduce using rule 66 (expression -> TRUE .)
    LBRACK          reduce using rule 66 (expression -> TRUE .)
    LET             reduce using rule 66 (expression -> TRUE .)
    $end            reduce using rule 66 (expression -> TRUE .)
    SEMICOLON       reduce using rule 66 (expression -> TRUE .)
    RPAREN          reduce using rule 66 (expression -> TRUE .)
    THEN            reduce using rule 66 (expression -> TRUE .)
    DO              reduce using rule 66 (expression -> TRUE .)
    COMMA           reduce using rule 66 (expression -> TRUE .)
    RBRACK          reduce using rule 66 (expression -> TRUE .)
    ELSE            reduce using rule 66 (expression -> TRUE .)
    PIPE            reduce using rule 66 (expression -> TRUE .)


state 38

    (67) expression -> FALSE .

    PLUS            reduce using rule 67 (expression -> FALSE .)
    MINUS           reduce using rule 67 (expression -> FALSE .)
    TIMES           reduce using rule 67 (expression -> FALSE .)
    DIVIDE          reduce using rule 67 (expression -> FALSE .)
    MOD             reduce using rule 67 (expression -> FALSE .)
    POW             reduce using rule 67 (expression -> FALSE .)
    EQ              reduce using rule 67 (expression -> FALSE .)
    NEQ             reduce using rule 67 (expression -> FALSE .)
    LT              reduce using rule 67 (expression -> FALSE .)
    LE              reduce using rule 67 (expression -> FALSE .)
    GT              reduce using rule 67 (expression -> FALSE .)
    GE              reduce using rule 67 (expression -> FALSE .)
    AND             reduce using rule 67 (expression -> FALSE .)
    OR              reduce using rule 67 (expression -> FALSE .)
    LBRACK          reduce using rule 67 (expression -> FALSE .)
    LET             reduce using rule 67 (expression -> FALSE .)
    $end            reduce using rule 67 (expression -> FALSE .)
    SEMICOLON       reduce using rule 67 (expression -> FALSE .)
    RPAREN          reduce using rule 67 (expression -> FALSE .)
    THEN            reduce using rule 67 (expression -> FALSE .)
    DO              reduce using rule 67 (expression -> FALSE .)
    COMMA           reduce using rule 67 (expression -> FALSE .)
    RBRACK          reduce using rule 67 (expression -> FALSE .)
    ELSE            reduce using rule 67 (expression -> FALSE .)
    PIPE            reduce using rule 67 (expression -> FALSE .)


state 39

    (68) expression -> UNIT .

    PLUS            reduce using rule 68 (expression -> UNIT .)
    MINUS           reduce using rule 68 (expression -> UNIT .)
    TIMES           reduce using rule 68 (expression -> UNIT .)
    DIVIDE          reduce using rule 68 (expression -> UNIT .)
    MOD             reduce using rule 68 (expression -> UNIT .)
    POW             reduce using rule 68 (expression -> UNIT .)
    EQ              reduce using rule 68 (expression -> UNIT .)
    NEQ             reduce using rule 68 (expression -> UNIT .)
    LT              reduce using rule 68 (expression -> UNIT .)
    LE              reduce using rule 68 (expression -> UNIT .)
    GT              reduce using rule 68 (expression -> UNIT .)
    GE              reduce using rule 68 (expression -> UNIT .)
    AND             reduce using rule 68 (expression -> UNIT .)
    OR              reduce using rule 68 (expression -> UNIT .)
    LBRACK          reduce using rule 68 (expression -> UNIT .)
    LET             reduce using rule 68 (expression -> UNIT .)
    $end            reduce using rule 68 (expression -> UNIT .)
    SEMICOLON       reduce using rule 68 (expression -> UNIT .)
    RPAREN          reduce using rule 68 (expression -> UNIT .)
    THEN            reduce using rule 68 (expression -> UNIT .)
    DO              reduce using rule 68 (expression -> UNIT .)
    COMMA           reduce using rule 68 (expression -> UNIT .)
    RBRACK          reduce using rule 68 (expression -> UNIT .)
    ELSE            reduce using rule 68 (expression -> UNIT .)
    PIPE            reduce using rule 68 (expression -> UNIT .)


state 40

    (69) expression -> NULL .

    PLUS            reduce using rule 69 (expression -> NULL .)
    MINUS           reduce using rule 69 (expression -> NULL .)
    TIMES           reduce using rule 69 (expression -> NULL .)
    DIVIDE          reduce using rule 69 (expression -> NULL .)
    MOD             reduce using rule 69 (expression -> NULL .)
    POW             reduce using rule 69 (expression -> NULL .)
    EQ              reduce using rule 69 (expression -> NULL .)
    NEQ             reduce using rule 69 (expression -> NULL .)
    LT              reduce using rule 69 (expression -> NULL .)
    LE              reduce using rule 69 (expression -> NULL .)
    GT              reduce using rule 69 (expression -> NULL .)
    GE              reduce using rule 69 (expression -> NULL .)
    AND             reduce using rule 69 (expression -> NULL .)
    OR              reduce using rule 69 (expression -> NULL .)
    LBRACK          reduce using rule 69 (expression -> NULL .)
    LET             reduce using rule 69 (expression -> NULL .)
    $end            reduce using rule 69 (expression -> NULL .)
    SEMICOLON       reduce using rule 69 (expression -> NULL .)
    RPAREN          reduce using rule 69 (expression -> NULL .)
    THEN            reduce using rule 69 (expression -> NULL .)
    DO              reduce using rule 69 (expression -> NULL .)
    COMMA           reduce using rule 69 (expression -> NULL .)
    RBRACK          reduce using rule 69 (expression -> NULL .)
    ELSE            reduce using rule 69 (expression -> NULL .)
    PIPE            reduce using rule 69 (expression -> NULL .)


state 41

    (74) expression -> NEW . type LBRACK expression PIPE expression RBRACK
    (75) expression -> NEW . type LBRACK expression PIPE command RBRACK
    (24) type -> . ID
    (25) type -> . type LBRACK RBRACK
    (26) type -> . type ARROW type
    (27) type -> . LPAREN type_list RPAREN

    ID              shift and go to state 13
    LPAREN          shift and go to state 15

    type                           shift and go to state 75

state 42

    (12) statement_list -> statement . SEMICOLON statement_list

    SEMICOLON       shift and go to state 76


state 43

    (13) statement_list -> statement_no_semicolon .

    LET             reduce using rule 13 (statement_list -> statement_no_semicolon .)
    $end            reduce using rule 13 (statement_list -> statement_no_semicolon .)
    SEMICOLON       reduce using rule 13 (statement_list -> statement_no_semicolon .)
    RPAREN          reduce using rule 13 (statement_list -> statement_no_semicolon .)


state 44

    (14) statement -> declaration .
    (17) statement_no_semicolon -> declaration .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 14 (statement -> declaration .)
    SEMICOLON       reduce using rule 14 (statement -> declaration .)
    LET             reduce using rule 17 (statement_no_semicolon -> declaration .)
    $end            reduce using rule 17 (statement_no_semicolon -> declaration .)
    RPAREN          reduce using rule 17 (statement_no_semicolon -> declaration .)

  ! SEMICOLON       [ reduce using rule 17 (statement_no_semicolon -> declaration .) ]


state 45

    (30) command -> WHILE . expression DO simple_expr
    (31) command -> WHILE . expression DO block
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 77

state 46

    (32) command -> SET . lvalue ASSIGN expression
    (78) lvalue -> . ID
    (79) lvalue -> . lvalue LBRACK expression RBRACK

    ID              shift and go to state 79

    lvalue                         shift and go to state 78

state 47

    (25) type -> type LBRACK RBRACK .

    ASSIGN          reduce using rule 25 (type -> type LBRACK RBRACK .)
    LBRACK          reduce using rule 25 (type -> type LBRACK RBRACK .)
    ARROW           reduce using rule 25 (type -> type LBRACK RBRACK .)
    COMMA           reduce using rule 25 (type -> type LBRACK RBRACK .)
    RPAREN          reduce using rule 25 (type -> type LBRACK RBRACK .)


state 48

    (26) type -> type ARROW type .
    (25) type -> type . LBRACK RBRACK
    (26) type -> type . ARROW type

  ! shift/reduce conflict for LBRACK resolved as shift
  ! shift/reduce conflict for ARROW resolved as shift
    ASSIGN          reduce using rule 26 (type -> type ARROW type .)
    COMMA           reduce using rule 26 (type -> type ARROW type .)
    RPAREN          reduce using rule 26 (type -> type ARROW type .)
    LBRACK          shift and go to state 19
    ARROW           shift and go to state 20

  ! LBRACK          [ reduce using rule 26 (type -> type ARROW type .) ]
  ! ARROW           [ reduce using rule 26 (type -> type ARROW type .) ]


state 49

    (27) type -> LPAREN type_list RPAREN .

    ASSIGN          reduce using rule 27 (type -> LPAREN type_list RPAREN .)
    LBRACK          reduce using rule 27 (type -> LPAREN type_list RPAREN .)
    ARROW           reduce using rule 27 (type -> LPAREN type_list RPAREN .)
    COMMA           reduce using rule 27 (type -> LPAREN type_list RPAREN .)
    RPAREN          reduce using rule 27 (type -> LPAREN type_list RPAREN .)


state 50

    (28) type_list -> type COMMA . type_list
    (28) type_list -> . type COMMA type_list
    (29) type_list -> . type
    (24) type -> . ID
    (25) type -> . type LBRACK RBRACK
    (26) type -> . type ARROW type
    (27) type -> . LPAREN type_list RPAREN

    ID              shift and go to state 13
    LPAREN          shift and go to state 15

    type                           shift and go to state 22
    type_list                      shift and go to state 80

state 51

    (4) declaration -> LET ID LPAREN params RPAREN COLON type . ASSIGN fun_body
    (25) type -> type . LBRACK RBRACK
    (26) type -> type . ARROW type

    ASSIGN          shift and go to state 81
    LBRACK          shift and go to state 19
    ARROW           shift and go to state 20


state 52

    (71) expression -> ID LPAREN . args RPAREN
    (72) args -> . expression COMMA args
    (73) args -> . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    args                           shift and go to state 82
    expression                     shift and go to state 83

state 53

    (47) expression -> expression PLUS . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 84

state 54

    (48) expression -> expression MINUS . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 85

state 55

    (49) expression -> expression TIMES . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 86

state 56

    (50) expression -> expression DIVIDE . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 87

state 57

    (51) expression -> expression MOD . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 88

state 58

    (52) expression -> expression POW . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 89

state 59

    (53) expression -> expression EQ . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 90

state 60

    (54) expression -> expression NEQ . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 91

state 61

    (55) expression -> expression LT . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 92

state 62

    (56) expression -> expression LE . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 93

state 63

    (57) expression -> expression GT . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 94

state 64

    (58) expression -> expression GE . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 95

state 65

    (59) expression -> expression AND . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 96

state 66

    (60) expression -> expression OR . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 97

state 67

    (76) expression -> expression LBRACK . expression RBRACK
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 98

state 68

    (35) expression -> IF expression . THEN simple_expr
    (36) expression -> IF expression . THEN block
    (37) expression -> IF expression . THEN LPAREN statement_list RPAREN
    (38) expression -> IF expression . THEN simple_expr ELSE simple_expr
    (39) expression -> IF expression . THEN simple_expr ELSE block
    (40) expression -> IF expression . THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> IF expression . THEN block ELSE simple_expr
    (42) expression -> IF expression . THEN block ELSE block
    (43) expression -> IF expression . THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> IF expression . THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> IF expression . THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> IF expression . THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    THEN            shift and go to state 99
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    LBRACK          shift and go to state 67


state 69

    (63) expression -> LPAREN . command RPAREN
    (70) expression -> LPAREN . expression RPAREN
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    WHILE           shift and go to state 45
    SET             shift and go to state 46
    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    command                        shift and go to state 100
    expression                     shift and go to state 101

state 70

    (63) expression -> LPAREN command . RPAREN
    (15) statement -> command .
    (18) statement_no_semicolon -> command .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 102
    SEMICOLON       reduce using rule 15 (statement -> command .)

  ! RPAREN          [ reduce using rule 18 (statement_no_semicolon -> command .) ]


state 71

    (70) expression -> LPAREN expression . RPAREN
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK
    (16) statement -> expression .
    (19) statement_no_semicolon -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 103
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    LBRACK          shift and go to state 67
    SEMICOLON       reduce using rule 16 (statement -> expression .)

  ! RPAREN          [ reduce using rule 19 (statement_no_semicolon -> expression .) ]


state 72

    (11) block -> LPAREN statement_list . RPAREN

    RPAREN          shift and go to state 104


state 73

    (61) expression -> MINUS expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    PLUS            reduce using rule 61 (expression -> MINUS expression .)
    MINUS           reduce using rule 61 (expression -> MINUS expression .)
    TIMES           reduce using rule 61 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 61 (expression -> MINUS expression .)
    MOD             reduce using rule 61 (expression -> MINUS expression .)
    POW             reduce using rule 61 (expression -> MINUS expression .)
    EQ              reduce using rule 61 (expression -> MINUS expression .)
    NEQ             reduce using rule 61 (expression -> MINUS expression .)
    LT              reduce using rule 61 (expression -> MINUS expression .)
    LE              reduce using rule 61 (expression -> MINUS expression .)
    GT              reduce using rule 61 (expression -> MINUS expression .)
    GE              reduce using rule 61 (expression -> MINUS expression .)
    AND             reduce using rule 61 (expression -> MINUS expression .)
    OR              reduce using rule 61 (expression -> MINUS expression .)
    LET             reduce using rule 61 (expression -> MINUS expression .)
    $end            reduce using rule 61 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 61 (expression -> MINUS expression .)
    RPAREN          reduce using rule 61 (expression -> MINUS expression .)
    THEN            reduce using rule 61 (expression -> MINUS expression .)
    DO              reduce using rule 61 (expression -> MINUS expression .)
    COMMA           reduce using rule 61 (expression -> MINUS expression .)
    RBRACK          reduce using rule 61 (expression -> MINUS expression .)
    ELSE            reduce using rule 61 (expression -> MINUS expression .)
    PIPE            reduce using rule 61 (expression -> MINUS expression .)
    LBRACK          shift and go to state 67

  ! LBRACK          [ reduce using rule 61 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 54 ]
  ! TIMES           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 57 ]
  ! POW             [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! LE              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 74

    (62) expression -> NOT expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    PLUS            reduce using rule 62 (expression -> NOT expression .)
    MINUS           reduce using rule 62 (expression -> NOT expression .)
    TIMES           reduce using rule 62 (expression -> NOT expression .)
    DIVIDE          reduce using rule 62 (expression -> NOT expression .)
    MOD             reduce using rule 62 (expression -> NOT expression .)
    POW             reduce using rule 62 (expression -> NOT expression .)
    EQ              reduce using rule 62 (expression -> NOT expression .)
    NEQ             reduce using rule 62 (expression -> NOT expression .)
    LT              reduce using rule 62 (expression -> NOT expression .)
    LE              reduce using rule 62 (expression -> NOT expression .)
    GT              reduce using rule 62 (expression -> NOT expression .)
    GE              reduce using rule 62 (expression -> NOT expression .)
    AND             reduce using rule 62 (expression -> NOT expression .)
    OR              reduce using rule 62 (expression -> NOT expression .)
    LET             reduce using rule 62 (expression -> NOT expression .)
    $end            reduce using rule 62 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 62 (expression -> NOT expression .)
    RPAREN          reduce using rule 62 (expression -> NOT expression .)
    THEN            reduce using rule 62 (expression -> NOT expression .)
    DO              reduce using rule 62 (expression -> NOT expression .)
    COMMA           reduce using rule 62 (expression -> NOT expression .)
    RBRACK          reduce using rule 62 (expression -> NOT expression .)
    ELSE            reduce using rule 62 (expression -> NOT expression .)
    PIPE            reduce using rule 62 (expression -> NOT expression .)
    LBRACK          shift and go to state 67

  ! LBRACK          [ reduce using rule 62 (expression -> NOT expression .) ]
  ! PLUS            [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 54 ]
  ! TIMES           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 57 ]
  ! POW             [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! LE              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 75

    (74) expression -> NEW type . LBRACK expression PIPE expression RBRACK
    (75) expression -> NEW type . LBRACK expression PIPE command RBRACK
    (25) type -> type . LBRACK RBRACK
    (26) type -> type . ARROW type

    LBRACK          shift and go to state 105
    ARROW           shift and go to state 20


state 76

    (12) statement_list -> statement SEMICOLON . statement_list
    (12) statement_list -> . statement SEMICOLON statement_list
    (13) statement_list -> . statement_no_semicolon
    (14) statement -> . declaration
    (15) statement -> . command
    (16) statement -> . expression
    (17) statement_no_semicolon -> . declaration
    (18) statement_no_semicolon -> . command
    (19) statement_no_semicolon -> . expression
    (4) declaration -> . LET ID LPAREN params RPAREN COLON type ASSIGN fun_body
    (5) declaration -> . LET ID COLON type ASSIGN var_body
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    LET             shift and go to state 4
    WHILE           shift and go to state 45
    SET             shift and go to state 46
    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    statement                      shift and go to state 42
    statement_list                 shift and go to state 106
    statement_no_semicolon         shift and go to state 43
    declaration                    shift and go to state 44
    command                        shift and go to state 34
    expression                     shift and go to state 107

state 77

    (30) command -> WHILE expression . DO simple_expr
    (31) command -> WHILE expression . DO block
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    DO              shift and go to state 108
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    LBRACK          shift and go to state 67


state 78

    (32) command -> SET lvalue . ASSIGN expression
    (79) lvalue -> lvalue . LBRACK expression RBRACK

    ASSIGN          shift and go to state 109
    LBRACK          shift and go to state 110


state 79

    (78) lvalue -> ID .

    ASSIGN          reduce using rule 78 (lvalue -> ID .)
    LBRACK          reduce using rule 78 (lvalue -> ID .)


state 80

    (28) type_list -> type COMMA type_list .

    RPAREN          reduce using rule 28 (type_list -> type COMMA type_list .)


state 81

    (4) declaration -> LET ID LPAREN params RPAREN COLON type ASSIGN . fun_body
    (9) fun_body -> . statement_list
    (10) fun_body -> . block
    (12) statement_list -> . statement SEMICOLON statement_list
    (13) statement_list -> . statement_no_semicolon
    (11) block -> . LPAREN statement_list RPAREN
    (14) statement -> . declaration
    (15) statement -> . command
    (16) statement -> . expression
    (17) statement_no_semicolon -> . declaration
    (18) statement_no_semicolon -> . command
    (19) statement_no_semicolon -> . expression
    (4) declaration -> . LET ID LPAREN params RPAREN COLON type ASSIGN fun_body
    (5) declaration -> . LET ID COLON type ASSIGN var_body
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    LPAREN          shift and go to state 111
    LET             shift and go to state 4
    WHILE           shift and go to state 45
    SET             shift and go to state 46
    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    fun_body                       shift and go to state 112
    statement_list                 shift and go to state 113
    block                          shift and go to state 114
    statement                      shift and go to state 42
    statement_no_semicolon         shift and go to state 43
    declaration                    shift and go to state 44
    command                        shift and go to state 34
    expression                     shift and go to state 107

state 82

    (71) expression -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 115


state 83

    (72) args -> expression . COMMA args
    (73) args -> expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    COMMA           shift and go to state 116
    RPAREN          reduce using rule 73 (args -> expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    LBRACK          shift and go to state 67


state 84

    (47) expression -> expression PLUS expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    PLUS            reduce using rule 47 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 47 (expression -> expression PLUS expression .)
    EQ              reduce using rule 47 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 47 (expression -> expression PLUS expression .)
    LT              reduce using rule 47 (expression -> expression PLUS expression .)
    LE              reduce using rule 47 (expression -> expression PLUS expression .)
    GT              reduce using rule 47 (expression -> expression PLUS expression .)
    GE              reduce using rule 47 (expression -> expression PLUS expression .)
    AND             reduce using rule 47 (expression -> expression PLUS expression .)
    OR              reduce using rule 47 (expression -> expression PLUS expression .)
    LET             reduce using rule 47 (expression -> expression PLUS expression .)
    $end            reduce using rule 47 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 47 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 47 (expression -> expression PLUS expression .)
    THEN            reduce using rule 47 (expression -> expression PLUS expression .)
    DO              reduce using rule 47 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 47 (expression -> expression PLUS expression .)
    RBRACK          reduce using rule 47 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 47 (expression -> expression PLUS expression .)
    PIPE            reduce using rule 47 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    LBRACK          shift and go to state 67

  ! TIMES           [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! POW             [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! LBRACK          [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! LE              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 85

    (48) expression -> expression MINUS expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    PLUS            reduce using rule 48 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 48 (expression -> expression MINUS expression .)
    EQ              reduce using rule 48 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 48 (expression -> expression MINUS expression .)
    LT              reduce using rule 48 (expression -> expression MINUS expression .)
    LE              reduce using rule 48 (expression -> expression MINUS expression .)
    GT              reduce using rule 48 (expression -> expression MINUS expression .)
    GE              reduce using rule 48 (expression -> expression MINUS expression .)
    AND             reduce using rule 48 (expression -> expression MINUS expression .)
    OR              reduce using rule 48 (expression -> expression MINUS expression .)
    LET             reduce using rule 48 (expression -> expression MINUS expression .)
    $end            reduce using rule 48 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 48 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 48 (expression -> expression MINUS expression .)
    THEN            reduce using rule 48 (expression -> expression MINUS expression .)
    DO              reduce using rule 48 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 48 (expression -> expression MINUS expression .)
    RBRACK          reduce using rule 48 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 48 (expression -> expression MINUS expression .)
    PIPE            reduce using rule 48 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    LBRACK          shift and go to state 67

  ! TIMES           [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! POW             [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! LBRACK          [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! LE              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 86

    (49) expression -> expression TIMES expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    PLUS            reduce using rule 49 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 49 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 49 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 49 (expression -> expression TIMES expression .)
    MOD             reduce using rule 49 (expression -> expression TIMES expression .)
    EQ              reduce using rule 49 (expression -> expression TIMES expression .)
    NEQ             reduce using rule 49 (expression -> expression TIMES expression .)
    LT              reduce using rule 49 (expression -> expression TIMES expression .)
    LE              reduce using rule 49 (expression -> expression TIMES expression .)
    GT              reduce using rule 49 (expression -> expression TIMES expression .)
    GE              reduce using rule 49 (expression -> expression TIMES expression .)
    AND             reduce using rule 49 (expression -> expression TIMES expression .)
    OR              reduce using rule 49 (expression -> expression TIMES expression .)
    LET             reduce using rule 49 (expression -> expression TIMES expression .)
    $end            reduce using rule 49 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 49 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 49 (expression -> expression TIMES expression .)
    THEN            reduce using rule 49 (expression -> expression TIMES expression .)
    DO              reduce using rule 49 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 49 (expression -> expression TIMES expression .)
    RBRACK          reduce using rule 49 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 49 (expression -> expression TIMES expression .)
    PIPE            reduce using rule 49 (expression -> expression TIMES expression .)
    POW             shift and go to state 58
    LBRACK          shift and go to state 67

  ! POW             [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! LBRACK          [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 54 ]
  ! TIMES           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! LE              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 87

    (50) expression -> expression DIVIDE expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    PLUS            reduce using rule 50 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 50 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 50 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 50 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 50 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 50 (expression -> expression DIVIDE expression .)
    NEQ             reduce using rule 50 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 50 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 50 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 50 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 50 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 50 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 50 (expression -> expression DIVIDE expression .)
    LET             reduce using rule 50 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 50 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 50 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 50 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 50 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 50 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 50 (expression -> expression DIVIDE expression .)
    RBRACK          reduce using rule 50 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 50 (expression -> expression DIVIDE expression .)
    PIPE            reduce using rule 50 (expression -> expression DIVIDE expression .)
    POW             shift and go to state 58
    LBRACK          shift and go to state 67

  ! POW             [ reduce using rule 50 (expression -> expression DIVIDE expression .) ]
  ! LBRACK          [ reduce using rule 50 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 54 ]
  ! TIMES           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! LE              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 88

    (51) expression -> expression MOD expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    PLUS            reduce using rule 51 (expression -> expression MOD expression .)
    MINUS           reduce using rule 51 (expression -> expression MOD expression .)
    TIMES           reduce using rule 51 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 51 (expression -> expression MOD expression .)
    MOD             reduce using rule 51 (expression -> expression MOD expression .)
    EQ              reduce using rule 51 (expression -> expression MOD expression .)
    NEQ             reduce using rule 51 (expression -> expression MOD expression .)
    LT              reduce using rule 51 (expression -> expression MOD expression .)
    LE              reduce using rule 51 (expression -> expression MOD expression .)
    GT              reduce using rule 51 (expression -> expression MOD expression .)
    GE              reduce using rule 51 (expression -> expression MOD expression .)
    AND             reduce using rule 51 (expression -> expression MOD expression .)
    OR              reduce using rule 51 (expression -> expression MOD expression .)
    LET             reduce using rule 51 (expression -> expression MOD expression .)
    $end            reduce using rule 51 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 51 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 51 (expression -> expression MOD expression .)
    THEN            reduce using rule 51 (expression -> expression MOD expression .)
    DO              reduce using rule 51 (expression -> expression MOD expression .)
    COMMA           reduce using rule 51 (expression -> expression MOD expression .)
    RBRACK          reduce using rule 51 (expression -> expression MOD expression .)
    ELSE            reduce using rule 51 (expression -> expression MOD expression .)
    PIPE            reduce using rule 51 (expression -> expression MOD expression .)
    POW             shift and go to state 58
    LBRACK          shift and go to state 67

  ! POW             [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! LBRACK          [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! PLUS            [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 54 ]
  ! TIMES           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! LE              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 89

    (52) expression -> expression POW expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    PLUS            reduce using rule 52 (expression -> expression POW expression .)
    MINUS           reduce using rule 52 (expression -> expression POW expression .)
    TIMES           reduce using rule 52 (expression -> expression POW expression .)
    DIVIDE          reduce using rule 52 (expression -> expression POW expression .)
    MOD             reduce using rule 52 (expression -> expression POW expression .)
    EQ              reduce using rule 52 (expression -> expression POW expression .)
    NEQ             reduce using rule 52 (expression -> expression POW expression .)
    LT              reduce using rule 52 (expression -> expression POW expression .)
    LE              reduce using rule 52 (expression -> expression POW expression .)
    GT              reduce using rule 52 (expression -> expression POW expression .)
    GE              reduce using rule 52 (expression -> expression POW expression .)
    AND             reduce using rule 52 (expression -> expression POW expression .)
    OR              reduce using rule 52 (expression -> expression POW expression .)
    LET             reduce using rule 52 (expression -> expression POW expression .)
    $end            reduce using rule 52 (expression -> expression POW expression .)
    SEMICOLON       reduce using rule 52 (expression -> expression POW expression .)
    RPAREN          reduce using rule 52 (expression -> expression POW expression .)
    THEN            reduce using rule 52 (expression -> expression POW expression .)
    DO              reduce using rule 52 (expression -> expression POW expression .)
    COMMA           reduce using rule 52 (expression -> expression POW expression .)
    RBRACK          reduce using rule 52 (expression -> expression POW expression .)
    ELSE            reduce using rule 52 (expression -> expression POW expression .)
    PIPE            reduce using rule 52 (expression -> expression POW expression .)
    POW             shift and go to state 58
    LBRACK          shift and go to state 67

  ! POW             [ reduce using rule 52 (expression -> expression POW expression .) ]
  ! LBRACK          [ reduce using rule 52 (expression -> expression POW expression .) ]
  ! PLUS            [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 54 ]
  ! TIMES           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! LE              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 90

    (53) expression -> expression EQ expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    EQ              reduce using rule 53 (expression -> expression EQ expression .)
    NEQ             reduce using rule 53 (expression -> expression EQ expression .)
    AND             reduce using rule 53 (expression -> expression EQ expression .)
    OR              reduce using rule 53 (expression -> expression EQ expression .)
    LET             reduce using rule 53 (expression -> expression EQ expression .)
    $end            reduce using rule 53 (expression -> expression EQ expression .)
    SEMICOLON       reduce using rule 53 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 53 (expression -> expression EQ expression .)
    THEN            reduce using rule 53 (expression -> expression EQ expression .)
    DO              reduce using rule 53 (expression -> expression EQ expression .)
    COMMA           reduce using rule 53 (expression -> expression EQ expression .)
    RBRACK          reduce using rule 53 (expression -> expression EQ expression .)
    ELSE            reduce using rule 53 (expression -> expression EQ expression .)
    PIPE            reduce using rule 53 (expression -> expression EQ expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    LBRACK          shift and go to state 67

  ! PLUS            [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! POW             [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! LBRACK          [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 91

    (54) expression -> expression NEQ expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    EQ              reduce using rule 54 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 54 (expression -> expression NEQ expression .)
    AND             reduce using rule 54 (expression -> expression NEQ expression .)
    OR              reduce using rule 54 (expression -> expression NEQ expression .)
    LET             reduce using rule 54 (expression -> expression NEQ expression .)
    $end            reduce using rule 54 (expression -> expression NEQ expression .)
    SEMICOLON       reduce using rule 54 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 54 (expression -> expression NEQ expression .)
    THEN            reduce using rule 54 (expression -> expression NEQ expression .)
    DO              reduce using rule 54 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 54 (expression -> expression NEQ expression .)
    RBRACK          reduce using rule 54 (expression -> expression NEQ expression .)
    ELSE            reduce using rule 54 (expression -> expression NEQ expression .)
    PIPE            reduce using rule 54 (expression -> expression NEQ expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    LBRACK          shift and go to state 67

  ! PLUS            [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! POW             [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! LE              [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! GE              [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! LBRACK          [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 92

    (55) expression -> expression LT expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    EQ              reduce using rule 55 (expression -> expression LT expression .)
    NEQ             reduce using rule 55 (expression -> expression LT expression .)
    LT              reduce using rule 55 (expression -> expression LT expression .)
    LE              reduce using rule 55 (expression -> expression LT expression .)
    GT              reduce using rule 55 (expression -> expression LT expression .)
    GE              reduce using rule 55 (expression -> expression LT expression .)
    AND             reduce using rule 55 (expression -> expression LT expression .)
    OR              reduce using rule 55 (expression -> expression LT expression .)
    LET             reduce using rule 55 (expression -> expression LT expression .)
    $end            reduce using rule 55 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 55 (expression -> expression LT expression .)
    RPAREN          reduce using rule 55 (expression -> expression LT expression .)
    THEN            reduce using rule 55 (expression -> expression LT expression .)
    DO              reduce using rule 55 (expression -> expression LT expression .)
    COMMA           reduce using rule 55 (expression -> expression LT expression .)
    RBRACK          reduce using rule 55 (expression -> expression LT expression .)
    ELSE            reduce using rule 55 (expression -> expression LT expression .)
    PIPE            reduce using rule 55 (expression -> expression LT expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    LBRACK          shift and go to state 67

  ! PLUS            [ reduce using rule 55 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 55 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 55 (expression -> expression LT expression .) ]
  ! POW             [ reduce using rule 55 (expression -> expression LT expression .) ]
  ! LBRACK          [ reduce using rule 55 (expression -> expression LT expression .) ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! LE              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 93

    (56) expression -> expression LE expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    EQ              reduce using rule 56 (expression -> expression LE expression .)
    NEQ             reduce using rule 56 (expression -> expression LE expression .)
    LT              reduce using rule 56 (expression -> expression LE expression .)
    LE              reduce using rule 56 (expression -> expression LE expression .)
    GT              reduce using rule 56 (expression -> expression LE expression .)
    GE              reduce using rule 56 (expression -> expression LE expression .)
    AND             reduce using rule 56 (expression -> expression LE expression .)
    OR              reduce using rule 56 (expression -> expression LE expression .)
    LET             reduce using rule 56 (expression -> expression LE expression .)
    $end            reduce using rule 56 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 56 (expression -> expression LE expression .)
    RPAREN          reduce using rule 56 (expression -> expression LE expression .)
    THEN            reduce using rule 56 (expression -> expression LE expression .)
    DO              reduce using rule 56 (expression -> expression LE expression .)
    COMMA           reduce using rule 56 (expression -> expression LE expression .)
    RBRACK          reduce using rule 56 (expression -> expression LE expression .)
    ELSE            reduce using rule 56 (expression -> expression LE expression .)
    PIPE            reduce using rule 56 (expression -> expression LE expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    LBRACK          shift and go to state 67

  ! PLUS            [ reduce using rule 56 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 56 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 56 (expression -> expression LE expression .) ]
  ! POW             [ reduce using rule 56 (expression -> expression LE expression .) ]
  ! LBRACK          [ reduce using rule 56 (expression -> expression LE expression .) ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! LE              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 94

    (57) expression -> expression GT expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    EQ              reduce using rule 57 (expression -> expression GT expression .)
    NEQ             reduce using rule 57 (expression -> expression GT expression .)
    LT              reduce using rule 57 (expression -> expression GT expression .)
    LE              reduce using rule 57 (expression -> expression GT expression .)
    GT              reduce using rule 57 (expression -> expression GT expression .)
    GE              reduce using rule 57 (expression -> expression GT expression .)
    AND             reduce using rule 57 (expression -> expression GT expression .)
    OR              reduce using rule 57 (expression -> expression GT expression .)
    LET             reduce using rule 57 (expression -> expression GT expression .)
    $end            reduce using rule 57 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 57 (expression -> expression GT expression .)
    RPAREN          reduce using rule 57 (expression -> expression GT expression .)
    THEN            reduce using rule 57 (expression -> expression GT expression .)
    DO              reduce using rule 57 (expression -> expression GT expression .)
    COMMA           reduce using rule 57 (expression -> expression GT expression .)
    RBRACK          reduce using rule 57 (expression -> expression GT expression .)
    ELSE            reduce using rule 57 (expression -> expression GT expression .)
    PIPE            reduce using rule 57 (expression -> expression GT expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    LBRACK          shift and go to state 67

  ! PLUS            [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! POW             [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! LBRACK          [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! LE              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 95

    (58) expression -> expression GE expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    EQ              reduce using rule 58 (expression -> expression GE expression .)
    NEQ             reduce using rule 58 (expression -> expression GE expression .)
    LT              reduce using rule 58 (expression -> expression GE expression .)
    LE              reduce using rule 58 (expression -> expression GE expression .)
    GT              reduce using rule 58 (expression -> expression GE expression .)
    GE              reduce using rule 58 (expression -> expression GE expression .)
    AND             reduce using rule 58 (expression -> expression GE expression .)
    OR              reduce using rule 58 (expression -> expression GE expression .)
    LET             reduce using rule 58 (expression -> expression GE expression .)
    $end            reduce using rule 58 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 58 (expression -> expression GE expression .)
    RPAREN          reduce using rule 58 (expression -> expression GE expression .)
    THEN            reduce using rule 58 (expression -> expression GE expression .)
    DO              reduce using rule 58 (expression -> expression GE expression .)
    COMMA           reduce using rule 58 (expression -> expression GE expression .)
    RBRACK          reduce using rule 58 (expression -> expression GE expression .)
    ELSE            reduce using rule 58 (expression -> expression GE expression .)
    PIPE            reduce using rule 58 (expression -> expression GE expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    LBRACK          shift and go to state 67

  ! PLUS            [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! POW             [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! LBRACK          [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! LE              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 96

    (59) expression -> expression AND expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    AND             reduce using rule 59 (expression -> expression AND expression .)
    OR              reduce using rule 59 (expression -> expression AND expression .)
    LET             reduce using rule 59 (expression -> expression AND expression .)
    $end            reduce using rule 59 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 59 (expression -> expression AND expression .)
    RPAREN          reduce using rule 59 (expression -> expression AND expression .)
    THEN            reduce using rule 59 (expression -> expression AND expression .)
    DO              reduce using rule 59 (expression -> expression AND expression .)
    COMMA           reduce using rule 59 (expression -> expression AND expression .)
    RBRACK          reduce using rule 59 (expression -> expression AND expression .)
    ELSE            reduce using rule 59 (expression -> expression AND expression .)
    PIPE            reduce using rule 59 (expression -> expression AND expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    LBRACK          shift and go to state 67

  ! PLUS            [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! POW             [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! LBRACK          [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 97

    (60) expression -> expression OR expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    OR              reduce using rule 60 (expression -> expression OR expression .)
    LET             reduce using rule 60 (expression -> expression OR expression .)
    $end            reduce using rule 60 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 60 (expression -> expression OR expression .)
    RPAREN          reduce using rule 60 (expression -> expression OR expression .)
    THEN            reduce using rule 60 (expression -> expression OR expression .)
    DO              reduce using rule 60 (expression -> expression OR expression .)
    COMMA           reduce using rule 60 (expression -> expression OR expression .)
    RBRACK          reduce using rule 60 (expression -> expression OR expression .)
    ELSE            reduce using rule 60 (expression -> expression OR expression .)
    PIPE            reduce using rule 60 (expression -> expression OR expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    AND             shift and go to state 65
    LBRACK          shift and go to state 67

  ! PLUS            [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! POW             [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! LBRACK          [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 66 ]


state 98

    (76) expression -> expression LBRACK expression . RBRACK
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    RBRACK          shift and go to state 117
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    LBRACK          shift and go to state 67


state 99

    (35) expression -> IF expression THEN . simple_expr
    (36) expression -> IF expression THEN . block
    (37) expression -> IF expression THEN . LPAREN statement_list RPAREN
    (38) expression -> IF expression THEN . simple_expr ELSE simple_expr
    (39) expression -> IF expression THEN . simple_expr ELSE block
    (40) expression -> IF expression THEN . simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> IF expression THEN . block ELSE simple_expr
    (42) expression -> IF expression THEN . block ELSE block
    (43) expression -> IF expression THEN . block ELSE LPAREN statement_list RPAREN
    (44) expression -> IF expression THEN . LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> IF expression THEN . LPAREN statement_list RPAREN ELSE block
    (46) expression -> IF expression THEN . LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (33) simple_expr -> . command
    (34) simple_expr -> . expression
    (11) block -> . LPAREN statement_list RPAREN
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    LPAREN          shift and go to state 121
    WHILE           shift and go to state 45
    SET             shift and go to state 46
    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 118
    simple_expr                    shift and go to state 119
    block                          shift and go to state 120
    command                        shift and go to state 122

state 100

    (63) expression -> LPAREN command . RPAREN

    RPAREN          shift and go to state 102


state 101

    (70) expression -> LPAREN expression . RPAREN
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    RPAREN          shift and go to state 103
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    LBRACK          shift and go to state 67


state 102

    (63) expression -> LPAREN command RPAREN .

    PLUS            reduce using rule 63 (expression -> LPAREN command RPAREN .)
    MINUS           reduce using rule 63 (expression -> LPAREN command RPAREN .)
    TIMES           reduce using rule 63 (expression -> LPAREN command RPAREN .)
    DIVIDE          reduce using rule 63 (expression -> LPAREN command RPAREN .)
    MOD             reduce using rule 63 (expression -> LPAREN command RPAREN .)
    POW             reduce using rule 63 (expression -> LPAREN command RPAREN .)
    EQ              reduce using rule 63 (expression -> LPAREN command RPAREN .)
    NEQ             reduce using rule 63 (expression -> LPAREN command RPAREN .)
    LT              reduce using rule 63 (expression -> LPAREN command RPAREN .)
    LE              reduce using rule 63 (expression -> LPAREN command RPAREN .)
    GT              reduce using rule 63 (expression -> LPAREN command RPAREN .)
    GE              reduce using rule 63 (expression -> LPAREN command RPAREN .)
    AND             reduce using rule 63 (expression -> LPAREN command RPAREN .)
    OR              reduce using rule 63 (expression -> LPAREN command RPAREN .)
    LBRACK          reduce using rule 63 (expression -> LPAREN command RPAREN .)
    LET             reduce using rule 63 (expression -> LPAREN command RPAREN .)
    $end            reduce using rule 63 (expression -> LPAREN command RPAREN .)
    SEMICOLON       reduce using rule 63 (expression -> LPAREN command RPAREN .)
    RPAREN          reduce using rule 63 (expression -> LPAREN command RPAREN .)
    THEN            reduce using rule 63 (expression -> LPAREN command RPAREN .)
    DO              reduce using rule 63 (expression -> LPAREN command RPAREN .)
    COMMA           reduce using rule 63 (expression -> LPAREN command RPAREN .)
    RBRACK          reduce using rule 63 (expression -> LPAREN command RPAREN .)
    ELSE            reduce using rule 63 (expression -> LPAREN command RPAREN .)
    PIPE            reduce using rule 63 (expression -> LPAREN command RPAREN .)


state 103

    (70) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    POW             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    LBRACK          reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    LET             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    PIPE            reduce using rule 70 (expression -> LPAREN expression RPAREN .)


state 104

    (11) block -> LPAREN statement_list RPAREN .

    LET             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    $end            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    SEMICOLON       reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    RPAREN          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    PLUS            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    MINUS           reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    TIMES           reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    DIVIDE          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    MOD             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    POW             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    EQ              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    NEQ             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LT              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LE              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    GT              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    GE              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    AND             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    OR              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LBRACK          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    THEN            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    DO              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    COMMA           reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    RBRACK          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    ELSE            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    PIPE            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)


state 105

    (74) expression -> NEW type LBRACK . expression PIPE expression RBRACK
    (75) expression -> NEW type LBRACK . expression PIPE command RBRACK
    (25) type -> type LBRACK . RBRACK
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    RBRACK          shift and go to state 47
    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 123

state 106

    (12) statement_list -> statement SEMICOLON statement_list .

    LET             reduce using rule 12 (statement_list -> statement SEMICOLON statement_list .)
    $end            reduce using rule 12 (statement_list -> statement SEMICOLON statement_list .)
    SEMICOLON       reduce using rule 12 (statement_list -> statement SEMICOLON statement_list .)
    RPAREN          reduce using rule 12 (statement_list -> statement SEMICOLON statement_list .)


state 107

    (16) statement -> expression .
    (19) statement_no_semicolon -> expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

  ! reduce/reduce conflict for SEMICOLON resolved using rule 16 (statement -> expression .)
    SEMICOLON       reduce using rule 16 (statement -> expression .)
    LET             reduce using rule 19 (statement_no_semicolon -> expression .)
    $end            reduce using rule 19 (statement_no_semicolon -> expression .)
    RPAREN          reduce using rule 19 (statement_no_semicolon -> expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    LBRACK          shift and go to state 67

  ! SEMICOLON       [ reduce using rule 19 (statement_no_semicolon -> expression .) ]


state 108

    (30) command -> WHILE expression DO . simple_expr
    (31) command -> WHILE expression DO . block
    (33) simple_expr -> . command
    (34) simple_expr -> . expression
    (11) block -> . LPAREN statement_list RPAREN
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    LPAREN          shift and go to state 111
    WHILE           shift and go to state 45
    SET             shift and go to state 46
    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 118
    simple_expr                    shift and go to state 124
    block                          shift and go to state 125
    command                        shift and go to state 122

state 109

    (32) command -> SET lvalue ASSIGN . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 126

state 110

    (79) lvalue -> lvalue LBRACK . expression RBRACK
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 127

state 111

    (11) block -> LPAREN . statement_list RPAREN
    (63) expression -> LPAREN . command RPAREN
    (70) expression -> LPAREN . expression RPAREN
    (12) statement_list -> . statement SEMICOLON statement_list
    (13) statement_list -> . statement_no_semicolon
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID
    (14) statement -> . declaration
    (15) statement -> . command
    (16) statement -> . expression
    (17) statement_no_semicolon -> . declaration
    (18) statement_no_semicolon -> . command
    (19) statement_no_semicolon -> . expression
    (4) declaration -> . LET ID LPAREN params RPAREN COLON type ASSIGN fun_body
    (5) declaration -> . LET ID COLON type ASSIGN var_body

    WHILE           shift and go to state 45
    SET             shift and go to state 46
    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41
    LET             shift and go to state 4

    statement_list                 shift and go to state 72
    command                        shift and go to state 70
    expression                     shift and go to state 71
    statement                      shift and go to state 42
    statement_no_semicolon         shift and go to state 43
    declaration                    shift and go to state 44

state 112

    (4) declaration -> LET ID LPAREN params RPAREN COLON type ASSIGN fun_body .

    LET             reduce using rule 4 (declaration -> LET ID LPAREN params RPAREN COLON type ASSIGN fun_body .)
    $end            reduce using rule 4 (declaration -> LET ID LPAREN params RPAREN COLON type ASSIGN fun_body .)
    SEMICOLON       reduce using rule 4 (declaration -> LET ID LPAREN params RPAREN COLON type ASSIGN fun_body .)
    RPAREN          reduce using rule 4 (declaration -> LET ID LPAREN params RPAREN COLON type ASSIGN fun_body .)


state 113

    (9) fun_body -> statement_list .

    LET             reduce using rule 9 (fun_body -> statement_list .)
    $end            reduce using rule 9 (fun_body -> statement_list .)
    SEMICOLON       reduce using rule 9 (fun_body -> statement_list .)
    RPAREN          reduce using rule 9 (fun_body -> statement_list .)


state 114

    (10) fun_body -> block .

    LET             reduce using rule 10 (fun_body -> block .)
    $end            reduce using rule 10 (fun_body -> block .)
    SEMICOLON       reduce using rule 10 (fun_body -> block .)
    RPAREN          reduce using rule 10 (fun_body -> block .)


state 115

    (71) expression -> ID LPAREN args RPAREN .

    PLUS            reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    TIMES           reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    MOD             reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    POW             reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    EQ              reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    NEQ             reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    LT              reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    LE              reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    GT              reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    GE              reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    AND             reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    OR              reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    LBRACK          reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    LET             reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    $end            reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    THEN            reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    DO              reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    RBRACK          reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    ELSE            reduce using rule 71 (expression -> ID LPAREN args RPAREN .)
    PIPE            reduce using rule 71 (expression -> ID LPAREN args RPAREN .)


state 116

    (72) args -> expression COMMA . args
    (72) args -> . expression COMMA args
    (73) args -> . expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 83
    args                           shift and go to state 128

state 117

    (76) expression -> expression LBRACK expression RBRACK .

    PLUS            reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    MINUS           reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    TIMES           reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    MOD             reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    POW             reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    EQ              reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    NEQ             reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    LT              reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    LE              reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    GT              reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    GE              reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    AND             reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    OR              reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    LBRACK          reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    LET             reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    $end            reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    RPAREN          reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    THEN            reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    DO              reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    COMMA           reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    RBRACK          reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    ELSE            reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)
    PIPE            reduce using rule 76 (expression -> expression LBRACK expression RBRACK .)


state 118

    (34) simple_expr -> expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
    LET             reduce using rule 34 (simple_expr -> expression .)
    $end            reduce using rule 34 (simple_expr -> expression .)
    SEMICOLON       reduce using rule 34 (simple_expr -> expression .)
    RPAREN          reduce using rule 34 (simple_expr -> expression .)
    THEN            reduce using rule 34 (simple_expr -> expression .)
    DO              reduce using rule 34 (simple_expr -> expression .)
    COMMA           reduce using rule 34 (simple_expr -> expression .)
    RBRACK          reduce using rule 34 (simple_expr -> expression .)
    ELSE            reduce using rule 34 (simple_expr -> expression .)
    PIPE            reduce using rule 34 (simple_expr -> expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    LBRACK          shift and go to state 67

  ! PLUS            [ reduce using rule 34 (simple_expr -> expression .) ]
  ! MINUS           [ reduce using rule 34 (simple_expr -> expression .) ]
  ! TIMES           [ reduce using rule 34 (simple_expr -> expression .) ]
  ! DIVIDE          [ reduce using rule 34 (simple_expr -> expression .) ]
  ! MOD             [ reduce using rule 34 (simple_expr -> expression .) ]
  ! POW             [ reduce using rule 34 (simple_expr -> expression .) ]
  ! EQ              [ reduce using rule 34 (simple_expr -> expression .) ]
  ! NEQ             [ reduce using rule 34 (simple_expr -> expression .) ]
  ! LT              [ reduce using rule 34 (simple_expr -> expression .) ]
  ! LE              [ reduce using rule 34 (simple_expr -> expression .) ]
  ! GT              [ reduce using rule 34 (simple_expr -> expression .) ]
  ! GE              [ reduce using rule 34 (simple_expr -> expression .) ]
  ! AND             [ reduce using rule 34 (simple_expr -> expression .) ]
  ! OR              [ reduce using rule 34 (simple_expr -> expression .) ]
  ! LBRACK          [ reduce using rule 34 (simple_expr -> expression .) ]


state 119

    (35) expression -> IF expression THEN simple_expr .
    (38) expression -> IF expression THEN simple_expr . ELSE simple_expr
    (39) expression -> IF expression THEN simple_expr . ELSE block
    (40) expression -> IF expression THEN simple_expr . ELSE LPAREN statement_list RPAREN

  ! shift/reduce conflict for ELSE resolved as shift
    PLUS            reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    MINUS           reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    TIMES           reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    DIVIDE          reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    MOD             reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    POW             reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    EQ              reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    NEQ             reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    LT              reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    LE              reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    GT              reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    GE              reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    AND             reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    OR              reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    LBRACK          reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    LET             reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    $end            reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    SEMICOLON       reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    RPAREN          reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    THEN            reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    DO              reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    COMMA           reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    RBRACK          reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    PIPE            reduce using rule 35 (expression -> IF expression THEN simple_expr .)
    ELSE            shift and go to state 129

  ! ELSE            [ reduce using rule 35 (expression -> IF expression THEN simple_expr .) ]


state 120

    (36) expression -> IF expression THEN block .
    (41) expression -> IF expression THEN block . ELSE simple_expr
    (42) expression -> IF expression THEN block . ELSE block
    (43) expression -> IF expression THEN block . ELSE LPAREN statement_list RPAREN

  ! shift/reduce conflict for ELSE resolved as shift
    PLUS            reduce using rule 36 (expression -> IF expression THEN block .)
    MINUS           reduce using rule 36 (expression -> IF expression THEN block .)
    TIMES           reduce using rule 36 (expression -> IF expression THEN block .)
    DIVIDE          reduce using rule 36 (expression -> IF expression THEN block .)
    MOD             reduce using rule 36 (expression -> IF expression THEN block .)
    POW             reduce using rule 36 (expression -> IF expression THEN block .)
    EQ              reduce using rule 36 (expression -> IF expression THEN block .)
    NEQ             reduce using rule 36 (expression -> IF expression THEN block .)
    LT              reduce using rule 36 (expression -> IF expression THEN block .)
    LE              reduce using rule 36 (expression -> IF expression THEN block .)
    GT              reduce using rule 36 (expression -> IF expression THEN block .)
    GE              reduce using rule 36 (expression -> IF expression THEN block .)
    AND             reduce using rule 36 (expression -> IF expression THEN block .)
    OR              reduce using rule 36 (expression -> IF expression THEN block .)
    LBRACK          reduce using rule 36 (expression -> IF expression THEN block .)
    LET             reduce using rule 36 (expression -> IF expression THEN block .)
    $end            reduce using rule 36 (expression -> IF expression THEN block .)
    SEMICOLON       reduce using rule 36 (expression -> IF expression THEN block .)
    RPAREN          reduce using rule 36 (expression -> IF expression THEN block .)
    THEN            reduce using rule 36 (expression -> IF expression THEN block .)
    DO              reduce using rule 36 (expression -> IF expression THEN block .)
    COMMA           reduce using rule 36 (expression -> IF expression THEN block .)
    RBRACK          reduce using rule 36 (expression -> IF expression THEN block .)
    PIPE            reduce using rule 36 (expression -> IF expression THEN block .)
    ELSE            shift and go to state 130

  ! ELSE            [ reduce using rule 36 (expression -> IF expression THEN block .) ]


state 121

    (37) expression -> IF expression THEN LPAREN . statement_list RPAREN
    (44) expression -> IF expression THEN LPAREN . statement_list RPAREN ELSE simple_expr
    (45) expression -> IF expression THEN LPAREN . statement_list RPAREN ELSE block
    (46) expression -> IF expression THEN LPAREN . statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (11) block -> LPAREN . statement_list RPAREN
    (63) expression -> LPAREN . command RPAREN
    (70) expression -> LPAREN . expression RPAREN
    (12) statement_list -> . statement SEMICOLON statement_list
    (13) statement_list -> . statement_no_semicolon
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID
    (14) statement -> . declaration
    (15) statement -> . command
    (16) statement -> . expression
    (17) statement_no_semicolon -> . declaration
    (18) statement_no_semicolon -> . command
    (19) statement_no_semicolon -> . expression
    (4) declaration -> . LET ID LPAREN params RPAREN COLON type ASSIGN fun_body
    (5) declaration -> . LET ID COLON type ASSIGN var_body

    WHILE           shift and go to state 45
    SET             shift and go to state 46
    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41
    LET             shift and go to state 4

    expression                     shift and go to state 71
    statement_list                 shift and go to state 131
    command                        shift and go to state 70
    statement                      shift and go to state 42
    statement_no_semicolon         shift and go to state 43
    declaration                    shift and go to state 44

state 122

    (33) simple_expr -> command .

    PLUS            reduce using rule 33 (simple_expr -> command .)
    MINUS           reduce using rule 33 (simple_expr -> command .)
    TIMES           reduce using rule 33 (simple_expr -> command .)
    DIVIDE          reduce using rule 33 (simple_expr -> command .)
    MOD             reduce using rule 33 (simple_expr -> command .)
    POW             reduce using rule 33 (simple_expr -> command .)
    EQ              reduce using rule 33 (simple_expr -> command .)
    NEQ             reduce using rule 33 (simple_expr -> command .)
    LT              reduce using rule 33 (simple_expr -> command .)
    LE              reduce using rule 33 (simple_expr -> command .)
    GT              reduce using rule 33 (simple_expr -> command .)
    GE              reduce using rule 33 (simple_expr -> command .)
    AND             reduce using rule 33 (simple_expr -> command .)
    OR              reduce using rule 33 (simple_expr -> command .)
    LBRACK          reduce using rule 33 (simple_expr -> command .)
    LET             reduce using rule 33 (simple_expr -> command .)
    $end            reduce using rule 33 (simple_expr -> command .)
    SEMICOLON       reduce using rule 33 (simple_expr -> command .)
    RPAREN          reduce using rule 33 (simple_expr -> command .)
    THEN            reduce using rule 33 (simple_expr -> command .)
    DO              reduce using rule 33 (simple_expr -> command .)
    COMMA           reduce using rule 33 (simple_expr -> command .)
    RBRACK          reduce using rule 33 (simple_expr -> command .)
    ELSE            reduce using rule 33 (simple_expr -> command .)
    PIPE            reduce using rule 33 (simple_expr -> command .)


state 123

    (74) expression -> NEW type LBRACK expression . PIPE expression RBRACK
    (75) expression -> NEW type LBRACK expression . PIPE command RBRACK
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    PIPE            shift and go to state 132
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    LBRACK          shift and go to state 67


state 124

    (30) command -> WHILE expression DO simple_expr .

    SEMICOLON       reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    LET             reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    $end            reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    RPAREN          reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    PLUS            reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    MINUS           reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    TIMES           reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    DIVIDE          reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    MOD             reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    POW             reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    EQ              reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    NEQ             reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    LT              reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    LE              reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    GT              reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    GE              reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    AND             reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    OR              reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    LBRACK          reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    THEN            reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    DO              reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    COMMA           reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    RBRACK          reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    ELSE            reduce using rule 30 (command -> WHILE expression DO simple_expr .)
    PIPE            reduce using rule 30 (command -> WHILE expression DO simple_expr .)


state 125

    (31) command -> WHILE expression DO block .

    SEMICOLON       reduce using rule 31 (command -> WHILE expression DO block .)
    LET             reduce using rule 31 (command -> WHILE expression DO block .)
    $end            reduce using rule 31 (command -> WHILE expression DO block .)
    RPAREN          reduce using rule 31 (command -> WHILE expression DO block .)
    PLUS            reduce using rule 31 (command -> WHILE expression DO block .)
    MINUS           reduce using rule 31 (command -> WHILE expression DO block .)
    TIMES           reduce using rule 31 (command -> WHILE expression DO block .)
    DIVIDE          reduce using rule 31 (command -> WHILE expression DO block .)
    MOD             reduce using rule 31 (command -> WHILE expression DO block .)
    POW             reduce using rule 31 (command -> WHILE expression DO block .)
    EQ              reduce using rule 31 (command -> WHILE expression DO block .)
    NEQ             reduce using rule 31 (command -> WHILE expression DO block .)
    LT              reduce using rule 31 (command -> WHILE expression DO block .)
    LE              reduce using rule 31 (command -> WHILE expression DO block .)
    GT              reduce using rule 31 (command -> WHILE expression DO block .)
    GE              reduce using rule 31 (command -> WHILE expression DO block .)
    AND             reduce using rule 31 (command -> WHILE expression DO block .)
    OR              reduce using rule 31 (command -> WHILE expression DO block .)
    LBRACK          reduce using rule 31 (command -> WHILE expression DO block .)
    THEN            reduce using rule 31 (command -> WHILE expression DO block .)
    DO              reduce using rule 31 (command -> WHILE expression DO block .)
    COMMA           reduce using rule 31 (command -> WHILE expression DO block .)
    RBRACK          reduce using rule 31 (command -> WHILE expression DO block .)
    ELSE            reduce using rule 31 (command -> WHILE expression DO block .)
    PIPE            reduce using rule 31 (command -> WHILE expression DO block .)


state 126

    (32) command -> SET lvalue ASSIGN expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
    SEMICOLON       reduce using rule 32 (command -> SET lvalue ASSIGN expression .)
    LET             reduce using rule 32 (command -> SET lvalue ASSIGN expression .)
    $end            reduce using rule 32 (command -> SET lvalue ASSIGN expression .)
    RPAREN          reduce using rule 32 (command -> SET lvalue ASSIGN expression .)
    THEN            reduce using rule 32 (command -> SET lvalue ASSIGN expression .)
    DO              reduce using rule 32 (command -> SET lvalue ASSIGN expression .)
    COMMA           reduce using rule 32 (command -> SET lvalue ASSIGN expression .)
    RBRACK          reduce using rule 32 (command -> SET lvalue ASSIGN expression .)
    ELSE            reduce using rule 32 (command -> SET lvalue ASSIGN expression .)
    PIPE            reduce using rule 32 (command -> SET lvalue ASSIGN expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    LBRACK          shift and go to state 67

  ! PLUS            [ reduce using rule 32 (command -> SET lvalue ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 32 (command -> SET lvalue ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 32 (command -> SET lvalue ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 32 (command -> SET lvalue ASSIGN expression .) ]
  ! MOD             [ reduce using rule 32 (command -> SET lvalue ASSIGN expression .) ]
  ! POW             [ reduce using rule 32 (command -> SET lvalue ASSIGN expression .) ]
  ! EQ              [ reduce using rule 32 (command -> SET lvalue ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 32 (command -> SET lvalue ASSIGN expression .) ]
  ! LT              [ reduce using rule 32 (command -> SET lvalue ASSIGN expression .) ]
  ! LE              [ reduce using rule 32 (command -> SET lvalue ASSIGN expression .) ]
  ! GT              [ reduce using rule 32 (command -> SET lvalue ASSIGN expression .) ]
  ! GE              [ reduce using rule 32 (command -> SET lvalue ASSIGN expression .) ]
  ! AND             [ reduce using rule 32 (command -> SET lvalue ASSIGN expression .) ]
  ! OR              [ reduce using rule 32 (command -> SET lvalue ASSIGN expression .) ]
  ! LBRACK          [ reduce using rule 32 (command -> SET lvalue ASSIGN expression .) ]


state 127

    (79) lvalue -> lvalue LBRACK expression . RBRACK
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    RBRACK          shift and go to state 133
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    LBRACK          shift and go to state 67


state 128

    (72) args -> expression COMMA args .

    RPAREN          reduce using rule 72 (args -> expression COMMA args .)


state 129

    (38) expression -> IF expression THEN simple_expr ELSE . simple_expr
    (39) expression -> IF expression THEN simple_expr ELSE . block
    (40) expression -> IF expression THEN simple_expr ELSE . LPAREN statement_list RPAREN
    (33) simple_expr -> . command
    (34) simple_expr -> . expression
    (11) block -> . LPAREN statement_list RPAREN
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    LPAREN          shift and go to state 136
    WHILE           shift and go to state 45
    SET             shift and go to state 46
    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 118
    simple_expr                    shift and go to state 134
    block                          shift and go to state 135
    command                        shift and go to state 122

state 130

    (41) expression -> IF expression THEN block ELSE . simple_expr
    (42) expression -> IF expression THEN block ELSE . block
    (43) expression -> IF expression THEN block ELSE . LPAREN statement_list RPAREN
    (33) simple_expr -> . command
    (34) simple_expr -> . expression
    (11) block -> . LPAREN statement_list RPAREN
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    LPAREN          shift and go to state 139
    WHILE           shift and go to state 45
    SET             shift and go to state 46
    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 118
    block                          shift and go to state 137
    simple_expr                    shift and go to state 138
    command                        shift and go to state 122

state 131

    (37) expression -> IF expression THEN LPAREN statement_list . RPAREN
    (44) expression -> IF expression THEN LPAREN statement_list . RPAREN ELSE simple_expr
    (45) expression -> IF expression THEN LPAREN statement_list . RPAREN ELSE block
    (46) expression -> IF expression THEN LPAREN statement_list . RPAREN ELSE LPAREN statement_list RPAREN
    (11) block -> LPAREN statement_list . RPAREN

    RPAREN          shift and go to state 140


state 132

    (74) expression -> NEW type LBRACK expression PIPE . expression RBRACK
    (75) expression -> NEW type LBRACK expression PIPE . command RBRACK
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression

    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41
    WHILE           shift and go to state 45
    SET             shift and go to state 46

    expression                     shift and go to state 141
    command                        shift and go to state 142

state 133

    (79) lvalue -> lvalue LBRACK expression RBRACK .

    ASSIGN          reduce using rule 79 (lvalue -> lvalue LBRACK expression RBRACK .)
    LBRACK          reduce using rule 79 (lvalue -> lvalue LBRACK expression RBRACK .)


state 134

    (38) expression -> IF expression THEN simple_expr ELSE simple_expr .

    PLUS            reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    MINUS           reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    TIMES           reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    DIVIDE          reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    MOD             reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    POW             reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    EQ              reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    NEQ             reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    LT              reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    LE              reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    GT              reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    GE              reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    AND             reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    OR              reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    LBRACK          reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    LET             reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    $end            reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    SEMICOLON       reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    RPAREN          reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    THEN            reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    DO              reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    COMMA           reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    RBRACK          reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    ELSE            reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)
    PIPE            reduce using rule 38 (expression -> IF expression THEN simple_expr ELSE simple_expr .)


state 135

    (39) expression -> IF expression THEN simple_expr ELSE block .

    PLUS            reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    MINUS           reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    TIMES           reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    DIVIDE          reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    MOD             reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    POW             reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    EQ              reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    NEQ             reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    LT              reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    LE              reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    GT              reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    GE              reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    AND             reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    OR              reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    LBRACK          reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    LET             reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    $end            reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    SEMICOLON       reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    RPAREN          reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    THEN            reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    DO              reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    COMMA           reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    RBRACK          reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    ELSE            reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)
    PIPE            reduce using rule 39 (expression -> IF expression THEN simple_expr ELSE block .)


state 136

    (40) expression -> IF expression THEN simple_expr ELSE LPAREN . statement_list RPAREN
    (11) block -> LPAREN . statement_list RPAREN
    (63) expression -> LPAREN . command RPAREN
    (70) expression -> LPAREN . expression RPAREN
    (12) statement_list -> . statement SEMICOLON statement_list
    (13) statement_list -> . statement_no_semicolon
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID
    (14) statement -> . declaration
    (15) statement -> . command
    (16) statement -> . expression
    (17) statement_no_semicolon -> . declaration
    (18) statement_no_semicolon -> . command
    (19) statement_no_semicolon -> . expression
    (4) declaration -> . LET ID LPAREN params RPAREN COLON type ASSIGN fun_body
    (5) declaration -> . LET ID COLON type ASSIGN var_body

    WHILE           shift and go to state 45
    SET             shift and go to state 46
    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41
    LET             shift and go to state 4

    expression                     shift and go to state 71
    statement_list                 shift and go to state 143
    command                        shift and go to state 70
    statement                      shift and go to state 42
    statement_no_semicolon         shift and go to state 43
    declaration                    shift and go to state 44

state 137

    (42) expression -> IF expression THEN block ELSE block .

    PLUS            reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    MINUS           reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    TIMES           reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    DIVIDE          reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    MOD             reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    POW             reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    EQ              reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    NEQ             reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    LT              reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    LE              reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    GT              reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    GE              reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    AND             reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    OR              reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    LBRACK          reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    LET             reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    $end            reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    SEMICOLON       reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    RPAREN          reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    THEN            reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    DO              reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    COMMA           reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    RBRACK          reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    ELSE            reduce using rule 42 (expression -> IF expression THEN block ELSE block .)
    PIPE            reduce using rule 42 (expression -> IF expression THEN block ELSE block .)


state 138

    (41) expression -> IF expression THEN block ELSE simple_expr .

    PLUS            reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    MINUS           reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    TIMES           reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    DIVIDE          reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    MOD             reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    POW             reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    EQ              reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    NEQ             reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    LT              reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    LE              reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    GT              reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    GE              reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    AND             reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    OR              reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    LBRACK          reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    LET             reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    $end            reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    SEMICOLON       reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    RPAREN          reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    THEN            reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    DO              reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    COMMA           reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    RBRACK          reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    ELSE            reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)
    PIPE            reduce using rule 41 (expression -> IF expression THEN block ELSE simple_expr .)


state 139

    (43) expression -> IF expression THEN block ELSE LPAREN . statement_list RPAREN
    (11) block -> LPAREN . statement_list RPAREN
    (63) expression -> LPAREN . command RPAREN
    (70) expression -> LPAREN . expression RPAREN
    (12) statement_list -> . statement SEMICOLON statement_list
    (13) statement_list -> . statement_no_semicolon
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID
    (14) statement -> . declaration
    (15) statement -> . command
    (16) statement -> . expression
    (17) statement_no_semicolon -> . declaration
    (18) statement_no_semicolon -> . command
    (19) statement_no_semicolon -> . expression
    (4) declaration -> . LET ID LPAREN params RPAREN COLON type ASSIGN fun_body
    (5) declaration -> . LET ID COLON type ASSIGN var_body

    WHILE           shift and go to state 45
    SET             shift and go to state 46
    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41
    LET             shift and go to state 4

    expression                     shift and go to state 71
    statement_list                 shift and go to state 144
    command                        shift and go to state 70
    statement                      shift and go to state 42
    statement_no_semicolon         shift and go to state 43
    declaration                    shift and go to state 44

state 140

    (37) expression -> IF expression THEN LPAREN statement_list RPAREN .
    (44) expression -> IF expression THEN LPAREN statement_list RPAREN . ELSE simple_expr
    (45) expression -> IF expression THEN LPAREN statement_list RPAREN . ELSE block
    (46) expression -> IF expression THEN LPAREN statement_list RPAREN . ELSE LPAREN statement_list RPAREN
    (11) block -> LPAREN statement_list RPAREN .

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for TIMES resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for MOD resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for POW resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for EQ resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for NEQ resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LT resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for GT resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for GE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for AND resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for OR resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LBRACK resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LET resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for THEN resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for DO resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for RBRACK resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for PIPE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
    ELSE            shift and go to state 145
    PLUS            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    MINUS           reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    TIMES           reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    DIVIDE          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    MOD             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    POW             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    EQ              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    NEQ             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LT              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LE              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    GT              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    GE              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    AND             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    OR              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LBRACK          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LET             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    $end            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    SEMICOLON       reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    RPAREN          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    THEN            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    DO              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    COMMA           reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    RBRACK          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    PIPE            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)

  ! PLUS            [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! MINUS           [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! TIMES           [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! MOD             [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! POW             [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! EQ              [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! NEQ             [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! LT              [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! LE              [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! GT              [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! GE              [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! AND             [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! OR              [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! LBRACK          [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! LET             [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! $end            [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! SEMICOLON       [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! RPAREN          [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! THEN            [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! DO              [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! COMMA           [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! RBRACK          [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! ELSE            [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! PIPE            [ reduce using rule 37 (expression -> IF expression THEN LPAREN statement_list RPAREN .) ]
  ! ELSE            [ reduce using rule 11 (block -> LPAREN statement_list RPAREN .) ]


state 141

    (74) expression -> NEW type LBRACK expression PIPE expression . RBRACK
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . LE expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (76) expression -> expression . LBRACK expression RBRACK

    RBRACK          shift and go to state 146
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    POW             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GT              shift and go to state 63
    GE              shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    LBRACK          shift and go to state 67


state 142

    (75) expression -> NEW type LBRACK expression PIPE command . RBRACK

    RBRACK          shift and go to state 147


state 143

    (40) expression -> IF expression THEN simple_expr ELSE LPAREN statement_list . RPAREN
    (11) block -> LPAREN statement_list . RPAREN

    RPAREN          shift and go to state 148


state 144

    (43) expression -> IF expression THEN block ELSE LPAREN statement_list . RPAREN
    (11) block -> LPAREN statement_list . RPAREN

    RPAREN          shift and go to state 149


state 145

    (44) expression -> IF expression THEN LPAREN statement_list RPAREN ELSE . simple_expr
    (45) expression -> IF expression THEN LPAREN statement_list RPAREN ELSE . block
    (46) expression -> IF expression THEN LPAREN statement_list RPAREN ELSE . LPAREN statement_list RPAREN
    (33) simple_expr -> . command
    (34) simple_expr -> . expression
    (11) block -> . LPAREN statement_list RPAREN
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID

    LPAREN          shift and go to state 150
    WHILE           shift and go to state 45
    SET             shift and go to state 46
    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41

    expression                     shift and go to state 118
    simple_expr                    shift and go to state 151
    block                          shift and go to state 152
    command                        shift and go to state 122

state 146

    (74) expression -> NEW type LBRACK expression PIPE expression RBRACK .

    PLUS            reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    MINUS           reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    TIMES           reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    DIVIDE          reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    MOD             reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    POW             reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    EQ              reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    NEQ             reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    LT              reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    LE              reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    GT              reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    GE              reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    AND             reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    OR              reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    LBRACK          reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    LET             reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    $end            reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    SEMICOLON       reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    RPAREN          reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    THEN            reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    DO              reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    COMMA           reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    RBRACK          reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    ELSE            reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)
    PIPE            reduce using rule 74 (expression -> NEW type LBRACK expression PIPE expression RBRACK .)


state 147

    (75) expression -> NEW type LBRACK expression PIPE command RBRACK .

    PLUS            reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    MINUS           reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    TIMES           reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    DIVIDE          reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    MOD             reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    POW             reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    EQ              reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    NEQ             reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    LT              reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    LE              reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    GT              reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    GE              reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    AND             reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    OR              reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    LBRACK          reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    LET             reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    $end            reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    SEMICOLON       reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    RPAREN          reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    THEN            reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    DO              reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    COMMA           reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    RBRACK          reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    ELSE            reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)
    PIPE            reduce using rule 75 (expression -> NEW type LBRACK expression PIPE command RBRACK .)


state 148

    (40) expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .
    (11) block -> LPAREN statement_list RPAREN .

  ! reduce/reduce conflict for PLUS resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for TIMES resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for MOD resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for POW resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for EQ resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for NEQ resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LT resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for GT resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for GE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for AND resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for OR resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LBRACK resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LET resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for THEN resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for DO resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for RBRACK resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for PIPE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
    PLUS            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    MINUS           reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    TIMES           reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    DIVIDE          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    MOD             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    POW             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    EQ              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    NEQ             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LT              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LE              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    GT              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    GE              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    AND             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    OR              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LBRACK          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LET             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    $end            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    SEMICOLON       reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    RPAREN          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    THEN            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    DO              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    COMMA           reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    RBRACK          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    ELSE            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    PIPE            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)

  ! PLUS            [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! MINUS           [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! TIMES           [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! MOD             [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! POW             [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! EQ              [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! NEQ             [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! LT              [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! LE              [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! GT              [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! GE              [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! AND             [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! OR              [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! LBRACK          [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! LET             [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! $end            [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! SEMICOLON       [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! RPAREN          [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! THEN            [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! DO              [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! COMMA           [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! RBRACK          [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! ELSE            [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]
  ! PIPE            [ reduce using rule 40 (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN .) ]


state 149

    (43) expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .
    (11) block -> LPAREN statement_list RPAREN .

  ! reduce/reduce conflict for PLUS resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for TIMES resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for MOD resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for POW resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for EQ resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for NEQ resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LT resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for GT resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for GE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for AND resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for OR resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LBRACK resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LET resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for THEN resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for DO resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for RBRACK resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for PIPE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
    PLUS            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    MINUS           reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    TIMES           reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    DIVIDE          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    MOD             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    POW             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    EQ              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    NEQ             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LT              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LE              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    GT              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    GE              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    AND             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    OR              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LBRACK          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LET             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    $end            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    SEMICOLON       reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    RPAREN          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    THEN            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    DO              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    COMMA           reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    RBRACK          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    ELSE            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    PIPE            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)

  ! PLUS            [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! MINUS           [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! TIMES           [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! MOD             [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! POW             [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! EQ              [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! NEQ             [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! LT              [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! LE              [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! GT              [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! GE              [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! AND             [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! OR              [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! LBRACK          [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! LET             [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! $end            [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! SEMICOLON       [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! RPAREN          [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! THEN            [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! DO              [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! COMMA           [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! RBRACK          [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! ELSE            [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]
  ! PIPE            [ reduce using rule 43 (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN .) ]


state 150

    (46) expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN . statement_list RPAREN
    (11) block -> LPAREN . statement_list RPAREN
    (63) expression -> LPAREN . command RPAREN
    (70) expression -> LPAREN . expression RPAREN
    (12) statement_list -> . statement SEMICOLON statement_list
    (13) statement_list -> . statement_no_semicolon
    (30) command -> . WHILE expression DO simple_expr
    (31) command -> . WHILE expression DO block
    (32) command -> . SET lvalue ASSIGN expression
    (35) expression -> . IF expression THEN simple_expr
    (36) expression -> . IF expression THEN block
    (37) expression -> . IF expression THEN LPAREN statement_list RPAREN
    (38) expression -> . IF expression THEN simple_expr ELSE simple_expr
    (39) expression -> . IF expression THEN simple_expr ELSE block
    (40) expression -> . IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN
    (41) expression -> . IF expression THEN block ELSE simple_expr
    (42) expression -> . IF expression THEN block ELSE block
    (43) expression -> . IF expression THEN block ELSE LPAREN statement_list RPAREN
    (44) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr
    (45) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE block
    (46) expression -> . IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression LE expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . MINUS expression
    (62) expression -> . NOT expression
    (63) expression -> . LPAREN command RPAREN
    (64) expression -> . INT_LITERAL
    (65) expression -> . STRING_LITERAL
    (66) expression -> . TRUE
    (67) expression -> . FALSE
    (68) expression -> . UNIT
    (69) expression -> . NULL
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . ID LPAREN args RPAREN
    (74) expression -> . NEW type LBRACK expression PIPE expression RBRACK
    (75) expression -> . NEW type LBRACK expression PIPE command RBRACK
    (76) expression -> . expression LBRACK expression RBRACK
    (77) expression -> . ID
    (14) statement -> . declaration
    (15) statement -> . command
    (16) statement -> . expression
    (17) statement_no_semicolon -> . declaration
    (18) statement_no_semicolon -> . command
    (19) statement_no_semicolon -> . expression
    (4) declaration -> . LET ID LPAREN params RPAREN COLON type ASSIGN fun_body
    (5) declaration -> . LET ID COLON type ASSIGN var_body

    WHILE           shift and go to state 45
    SET             shift and go to state 46
    IF              shift and go to state 30
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAREN          shift and go to state 69
    INT_LITERAL     shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UNIT            shift and go to state 39
    NULL            shift and go to state 40
    ID              shift and go to state 25
    NEW             shift and go to state 41
    LET             shift and go to state 4

    expression                     shift and go to state 71
    statement_list                 shift and go to state 153
    command                        shift and go to state 70
    statement                      shift and go to state 42
    statement_no_semicolon         shift and go to state 43
    declaration                    shift and go to state 44

state 151

    (44) expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .

    PLUS            reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    MINUS           reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    TIMES           reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    DIVIDE          reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    MOD             reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    POW             reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    EQ              reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    NEQ             reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    LT              reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    LE              reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    GT              reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    GE              reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    AND             reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    OR              reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    LBRACK          reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    LET             reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    $end            reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    SEMICOLON       reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    RPAREN          reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    THEN            reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    DO              reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    COMMA           reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    RBRACK          reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    ELSE            reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)
    PIPE            reduce using rule 44 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr .)


state 152

    (45) expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .

    PLUS            reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    MINUS           reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    TIMES           reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    DIVIDE          reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    MOD             reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    POW             reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    EQ              reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    NEQ             reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    LT              reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    LE              reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    GT              reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    GE              reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    AND             reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    OR              reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    LBRACK          reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    LET             reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    $end            reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    SEMICOLON       reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    RPAREN          reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    THEN            reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    DO              reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    COMMA           reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    RBRACK          reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    ELSE            reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)
    PIPE            reduce using rule 45 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block .)


state 153

    (46) expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list . RPAREN
    (11) block -> LPAREN statement_list . RPAREN

    RPAREN          shift and go to state 154


state 154

    (46) expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .
    (11) block -> LPAREN statement_list RPAREN .

  ! reduce/reduce conflict for PLUS resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for TIMES resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for MOD resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for POW resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for EQ resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for NEQ resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LT resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for GT resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for GE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for AND resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for OR resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LBRACK resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for LET resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for THEN resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for DO resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for RBRACK resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
  ! reduce/reduce conflict for PIPE resolved using rule 11 (block -> LPAREN statement_list RPAREN .)
    PLUS            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    MINUS           reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    TIMES           reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    DIVIDE          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    MOD             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    POW             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    EQ              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    NEQ             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LT              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LE              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    GT              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    GE              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    AND             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    OR              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LBRACK          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    LET             reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    $end            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    SEMICOLON       reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    RPAREN          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    THEN            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    DO              reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    COMMA           reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    RBRACK          reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    ELSE            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)
    PIPE            reduce using rule 11 (block -> LPAREN statement_list RPAREN .)

  ! PLUS            [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! MINUS           [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! TIMES           [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! MOD             [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! POW             [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! EQ              [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! NEQ             [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! LT              [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! LE              [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! GT              [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! GE              [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! AND             [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! OR              [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! LBRACK          [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! LET             [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! $end            [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! SEMICOLON       [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! RPAREN          [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! THEN            [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! DO              [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! COMMA           [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! RBRACK          [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! ELSE            [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]
  ! PIPE            [ reduce using rule 46 (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACK in state 48 resolved as shift
WARNING: shift/reduce conflict for ARROW in state 48 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 70 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 118 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 118 resolved as shift
WARNING: shift/reduce conflict for MOD in state 118 resolved as shift
WARNING: shift/reduce conflict for POW in state 118 resolved as shift
WARNING: shift/reduce conflict for EQ in state 118 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 118 resolved as shift
WARNING: shift/reduce conflict for LT in state 118 resolved as shift
WARNING: shift/reduce conflict for LE in state 118 resolved as shift
WARNING: shift/reduce conflict for GT in state 118 resolved as shift
WARNING: shift/reduce conflict for GE in state 118 resolved as shift
WARNING: shift/reduce conflict for AND in state 118 resolved as shift
WARNING: shift/reduce conflict for OR in state 118 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 118 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 119 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 126 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 126 resolved as shift
WARNING: shift/reduce conflict for MOD in state 126 resolved as shift
WARNING: shift/reduce conflict for POW in state 126 resolved as shift
WARNING: shift/reduce conflict for EQ in state 126 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 126 resolved as shift
WARNING: shift/reduce conflict for LT in state 126 resolved as shift
WARNING: shift/reduce conflict for LE in state 126 resolved as shift
WARNING: shift/reduce conflict for GT in state 126 resolved as shift
WARNING: shift/reduce conflict for GE in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for OR in state 126 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 126 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 140 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 140 resolved as shift
WARNING: reduce/reduce conflict in state 27 resolved using rule (var_body -> expression)
WARNING: rejected rule (statement -> expression) in state 27
WARNING: reduce/reduce conflict in state 27 resolved using rule (var_body -> expression)
WARNING: rejected rule (statement_no_semicolon -> expression) in state 27
WARNING: reduce/reduce conflict in state 34 resolved using rule (statement -> command)
WARNING: rejected rule (statement_no_semicolon -> command) in state 34
WARNING: reduce/reduce conflict in state 44 resolved using rule (statement -> declaration)
WARNING: rejected rule (statement_no_semicolon -> declaration) in state 44
WARNING: reduce/reduce conflict in state 107 resolved using rule (statement -> expression)
WARNING: rejected rule (statement_no_semicolon -> expression) in state 107
WARNING: reduce/reduce conflict in state 140 resolved using rule (block -> LPAREN statement_list RPAREN)
WARNING: rejected rule (expression -> IF expression THEN LPAREN statement_list RPAREN) in state 140
WARNING: reduce/reduce conflict in state 148 resolved using rule (block -> LPAREN statement_list RPAREN)
WARNING: rejected rule (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN) in state 148
WARNING: reduce/reduce conflict in state 149 resolved using rule (block -> LPAREN statement_list RPAREN)
WARNING: rejected rule (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN) in state 149
WARNING: reduce/reduce conflict in state 154 resolved using rule (block -> LPAREN statement_list RPAREN)
WARNING: rejected rule (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN) in state 154
WARNING: Rule (expression -> IF expression THEN LPAREN statement_list RPAREN) is never reduced
WARNING: Rule (expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN) is never reduced
WARNING: Rule (expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN) is never reduced
WARNING: Rule (expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN) is never reduced
