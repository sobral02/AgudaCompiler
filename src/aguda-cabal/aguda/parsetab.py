
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightSEMICOLONleftORleftANDnonassocEQNEQnonassocLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEMODrightPOWrightNOTUMINUSleftLBRACKAND ARROW ASSIGN COLON COMMA DIVIDE DO ELSE EQ FALSE GE GT ID IF INT_LITERAL LBRACK LE LET LPAREN LT MINUS MOD NEQ NEW NOT NULL OR PIPE PLUS POW RBRACK RPAREN SEMICOLON SET STRING_LITERAL THEN TIMES TRUE UNIT WHILEprogram : declarationsdeclarations : declaration declarations\n| declarationdeclaration : LET ID LPAREN params RPAREN COLON type ASSIGN fun_bodydeclaration : LET ID COLON type ASSIGN var_bodyvar_body : expressionvar_body : blockvar_body : statement_listfun_body : statement_list\n| blockblock : LPAREN statement_list RPARENstatement_list : statement SEMICOLON statement_list\n| statement_no_semicolonstatement : declaration\n| command\n| expressionstatement_no_semicolon : declaration\n| command\n| expressionparams : param_list\n| emptyparam_list : ID COMMA param_list\n| IDtype : IDtype : type LBRACK RBRACKtype : type ARROW typetype : LPAREN type_list RPARENtype_list : type COMMA type_list\n| typecommand : WHILE expression DO simple_expr\n| WHILE expression DO block\n| SET lvalue ASSIGN expressionsimple_expr : commandsimple_expr : expressionexpression : IF expression THEN simple_expr\n| IF expression THEN block\n| IF expression THEN LPAREN statement_list RPAREN\n| IF expression THEN simple_expr ELSE simple_expr\n| IF expression THEN simple_expr ELSE block\n| IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN\n| IF expression THEN block ELSE simple_expr\n| IF expression THEN block ELSE block\n| IF expression THEN block ELSE LPAREN statement_list RPAREN\n| IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr\n| IF expression THEN LPAREN statement_list RPAREN ELSE block\n| IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPARENexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression MOD expression\n| expression POW expression\n| expression EQ expression\n| expression NEQ expression\n| expression LT expression\n| expression LE expression\n| expression GT expression\n| expression GE expression\n| expression AND expression\n| expression OR expressionexpression : MINUS expression %prec UMINUS\n| NOT expressionexpression : LPAREN command RPARENexpression : INT_LITERAL\n| STRING_LITERAL\n| TRUE\n| FALSE\n| UNIT\n| NULLexpression : LPAREN expression RPARENexpression : ID LPAREN args RPARENargs : expression COMMA args\n| expressionexpression : NEW type LBRACK expression PIPE expression RBRACKexpression : NEW type LBRACK expression PIPE command RBRACKexpression : expression LBRACK expression RBRACKexpression : IDlvalue : IDlvalue : lvalue LBRACK expression RBRACKempty :'
    
_lr_action_items = {'LET':([0,3,18,25,26,27,28,29,31,34,35,36,37,38,39,40,43,44,73,74,76,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,102,103,104,106,107,111,112,113,114,115,117,118,119,120,121,122,124,125,126,134,135,136,137,138,139,140,146,147,148,149,150,151,152,154,],[4,4,4,-77,-5,-6,-7,-8,4,-18,-64,-65,-66,-67,-68,-69,-13,-17,-61,-62,4,4,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-63,-70,-11,-12,-19,4,-4,-9,-10,-71,-76,-34,-35,-36,4,-33,-30,-31,-32,-38,-39,4,-42,-41,4,-11,-74,-75,-11,-11,4,-44,-45,-11,]),'$end':([1,2,3,5,25,26,27,28,29,34,35,36,37,38,39,40,43,44,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,102,103,104,106,107,112,113,114,115,117,118,119,120,122,124,125,126,134,135,137,138,140,146,147,148,149,151,152,154,],[0,-1,-3,-2,-77,-5,-6,-7,-8,-18,-64,-65,-66,-67,-68,-69,-13,-17,-61,-62,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-63,-70,-11,-12,-19,-4,-9,-10,-71,-76,-34,-35,-36,-33,-30,-31,-32,-38,-39,-42,-41,-11,-74,-75,-11,-11,-44,-45,-11,]),'ID':([4,7,8,15,16,18,20,24,30,31,32,33,41,45,46,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,81,99,105,108,109,110,111,116,121,129,130,132,136,139,145,150,],[6,9,13,13,9,25,13,13,25,25,25,25,13,25,79,13,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'LPAREN':([6,8,15,18,20,24,25,30,31,32,33,41,45,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,81,99,105,108,109,110,111,116,121,129,130,132,136,139,145,150,],[7,15,15,31,15,15,52,69,69,69,69,15,69,15,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,111,121,69,111,69,69,69,69,69,136,139,69,69,69,150,69,]),'COLON':([6,17,],[8,24,]),'RPAREN':([7,9,10,11,12,13,21,22,23,25,26,27,28,29,34,35,36,37,38,39,40,43,44,47,48,49,70,71,72,73,74,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,100,101,102,103,104,106,107,112,113,114,115,117,118,119,120,122,124,125,126,128,131,134,135,137,138,140,143,144,146,147,148,149,151,152,153,154,],[-80,-23,17,-20,-21,-24,49,-29,-22,-77,-5,-6,-7,-8,-18,-64,-65,-66,-67,-68,-69,-13,-17,-25,-26,-27,102,103,104,-61,-62,-28,115,-73,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,102,103,-63,-70,-11,-12,-19,-4,-9,-10,-71,-76,-34,-35,-36,-33,-30,-31,-32,-72,140,-38,-39,-42,-41,-11,148,149,-74,-75,-11,-11,-44,-45,154,-11,]),'COMMA':([9,13,22,25,35,36,37,38,39,40,47,48,49,73,74,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,102,103,104,115,117,118,119,120,122,124,125,126,134,135,137,138,140,146,147,148,149,151,152,154,],[16,-24,50,-77,-64,-65,-66,-67,-68,-69,-25,-26,-27,-61,-62,116,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-63,-70,-11,-71,-76,-34,-35,-36,-33,-30,-31,-32,-38,-39,-42,-41,-11,-74,-75,-11,-11,-44,-45,-11,]),'ASSIGN':([13,14,47,48,49,51,78,79,133,],[-24,18,-25,-26,-27,81,109,-78,-79,]),'LBRACK':([13,14,22,25,27,35,36,37,38,39,40,47,48,49,51,68,71,73,74,75,77,78,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,107,115,117,118,119,120,122,123,124,125,126,127,133,134,135,137,138,140,141,146,147,148,149,151,152,154,],[-24,19,19,-77,67,-64,-65,-66,-67,-68,-69,-25,19,-27,19,67,67,67,67,105,67,110,-78,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-63,-70,-11,67,-71,-76,67,-35,-36,-33,67,-30,-31,67,67,-79,-38,-39,-42,-41,-11,67,-74,-75,-11,-11,-44,-45,-11,]),'ARROW':([13,14,22,47,48,49,51,75,],[-24,20,20,-25,20,-27,20,20,]),'IF':([18,30,31,32,33,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,81,99,105,108,109,110,111,116,121,129,130,132,136,139,145,150,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'MINUS':([18,25,27,30,31,32,33,35,36,37,38,39,40,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,73,74,76,77,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,105,107,108,109,110,111,115,116,117,118,119,120,121,122,123,124,125,126,127,129,130,132,134,135,136,137,138,139,140,141,145,146,147,148,149,150,151,152,154,],[32,-77,54,32,32,32,32,-64,-65,-66,-67,-68,-69,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,54,32,54,-61,-62,32,54,32,54,-47,-48,-49,-50,-51,-52,54,54,54,54,54,54,54,54,54,32,54,-63,-70,-11,32,54,32,32,32,32,-71,32,-76,54,-35,-36,32,-33,54,-30,-31,54,54,32,32,32,-38,-39,32,-42,-41,32,-11,54,32,-74,-75,-11,-11,32,-44,-45,-11,]),'NOT':([18,30,31,32,33,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,81,99,105,108,109,110,111,116,121,129,130,132,136,139,145,150,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'INT_LITERAL':([18,30,31,32,33,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,81,99,105,108,109,110,111,116,121,129,130,132,136,139,145,150,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'STRING_LITERAL':([18,30,31,32,33,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,81,99,105,108,109,110,111,116,121,129,130,132,136,139,145,150,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'TRUE':([18,30,31,32,33,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,81,99,105,108,109,110,111,116,121,129,130,132,136,139,145,150,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'FALSE':([18,30,31,32,33,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,81,99,105,108,109,110,111,116,121,129,130,132,136,139,145,150,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'UNIT':([18,30,31,32,33,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,81,99,105,108,109,110,111,116,121,129,130,132,136,139,145,150,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'NULL':([18,30,31,32,33,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,81,99,105,108,109,110,111,116,121,129,130,132,136,139,145,150,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'NEW':([18,30,31,32,33,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,81,99,105,108,109,110,111,116,121,129,130,132,136,139,145,150,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'WHILE':([18,31,69,76,81,99,108,111,121,129,130,132,136,139,145,150,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'SET':([18,31,69,76,81,99,108,111,121,129,130,132,136,139,145,150,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'RBRACK':([19,25,35,36,37,38,39,40,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,103,104,105,115,117,118,119,120,122,124,125,126,127,134,135,137,138,140,141,142,146,147,148,149,151,152,154,],[47,-77,-64,-65,-66,-67,-68,-69,-61,-62,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,117,-63,-70,-11,47,-71,-76,-34,-35,-36,-33,-30,-31,-32,133,-38,-39,-42,-41,-11,146,147,-74,-75,-11,-11,-44,-45,-11,]),'PLUS':([25,27,35,36,37,38,39,40,68,71,73,74,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,107,115,117,118,119,120,122,123,124,125,126,127,134,135,137,138,140,141,146,147,148,149,151,152,154,],[-77,53,-64,-65,-66,-67,-68,-69,53,53,-61,-62,53,53,-47,-48,-49,-50,-51,-52,53,53,53,53,53,53,53,53,53,53,-63,-70,-11,53,-71,-76,53,-35,-36,-33,53,-30,-31,53,53,-38,-39,-42,-41,-11,53,-74,-75,-11,-11,-44,-45,-11,]),'TIMES':([25,27,35,36,37,38,39,40,68,71,73,74,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,107,115,117,118,119,120,122,123,124,125,126,127,134,135,137,138,140,141,146,147,148,149,151,152,154,],[-77,55,-64,-65,-66,-67,-68,-69,55,55,-61,-62,55,55,55,55,-49,-50,-51,-52,55,55,55,55,55,55,55,55,55,55,-63,-70,-11,55,-71,-76,55,-35,-36,-33,55,-30,-31,55,55,-38,-39,-42,-41,-11,55,-74,-75,-11,-11,-44,-45,-11,]),'DIVIDE':([25,27,35,36,37,38,39,40,68,71,73,74,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,107,115,117,118,119,120,122,123,124,125,126,127,134,135,137,138,140,141,146,147,148,149,151,152,154,],[-77,56,-64,-65,-66,-67,-68,-69,56,56,-61,-62,56,56,56,56,-49,-50,-51,-52,56,56,56,56,56,56,56,56,56,56,-63,-70,-11,56,-71,-76,56,-35,-36,-33,56,-30,-31,56,56,-38,-39,-42,-41,-11,56,-74,-75,-11,-11,-44,-45,-11,]),'MOD':([25,27,35,36,37,38,39,40,68,71,73,74,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,107,115,117,118,119,120,122,123,124,125,126,127,134,135,137,138,140,141,146,147,148,149,151,152,154,],[-77,57,-64,-65,-66,-67,-68,-69,57,57,-61,-62,57,57,57,57,-49,-50,-51,-52,57,57,57,57,57,57,57,57,57,57,-63,-70,-11,57,-71,-76,57,-35,-36,-33,57,-30,-31,57,57,-38,-39,-42,-41,-11,57,-74,-75,-11,-11,-44,-45,-11,]),'POW':([25,27,35,36,37,38,39,40,68,71,73,74,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,107,115,117,118,119,120,122,123,124,125,126,127,134,135,137,138,140,141,146,147,148,149,151,152,154,],[-77,58,-64,-65,-66,-67,-68,-69,58,58,-61,-62,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-63,-70,-11,58,-71,-76,58,-35,-36,-33,58,-30,-31,58,58,-38,-39,-42,-41,-11,58,-74,-75,-11,-11,-44,-45,-11,]),'EQ':([25,27,35,36,37,38,39,40,68,71,73,74,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,107,115,117,118,119,120,122,123,124,125,126,127,134,135,137,138,140,141,146,147,148,149,151,152,154,],[-77,59,-64,-65,-66,-67,-68,-69,59,59,-61,-62,59,59,-47,-48,-49,-50,-51,-52,None,None,-55,-56,-57,-58,59,59,59,59,-63,-70,-11,59,-71,-76,59,-35,-36,-33,59,-30,-31,59,59,-38,-39,-42,-41,-11,59,-74,-75,-11,-11,-44,-45,-11,]),'NEQ':([25,27,35,36,37,38,39,40,68,71,73,74,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,107,115,117,118,119,120,122,123,124,125,126,127,134,135,137,138,140,141,146,147,148,149,151,152,154,],[-77,60,-64,-65,-66,-67,-68,-69,60,60,-61,-62,60,60,-47,-48,-49,-50,-51,-52,None,None,-55,-56,-57,-58,60,60,60,60,-63,-70,-11,60,-71,-76,60,-35,-36,-33,60,-30,-31,60,60,-38,-39,-42,-41,-11,60,-74,-75,-11,-11,-44,-45,-11,]),'LT':([25,27,35,36,37,38,39,40,68,71,73,74,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,107,115,117,118,119,120,122,123,124,125,126,127,134,135,137,138,140,141,146,147,148,149,151,152,154,],[-77,61,-64,-65,-66,-67,-68,-69,61,61,-61,-62,61,61,-47,-48,-49,-50,-51,-52,61,61,None,None,None,None,61,61,61,61,-63,-70,-11,61,-71,-76,61,-35,-36,-33,61,-30,-31,61,61,-38,-39,-42,-41,-11,61,-74,-75,-11,-11,-44,-45,-11,]),'LE':([25,27,35,36,37,38,39,40,68,71,73,74,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,107,115,117,118,119,120,122,123,124,125,126,127,134,135,137,138,140,141,146,147,148,149,151,152,154,],[-77,62,-64,-65,-66,-67,-68,-69,62,62,-61,-62,62,62,-47,-48,-49,-50,-51,-52,62,62,None,None,None,None,62,62,62,62,-63,-70,-11,62,-71,-76,62,-35,-36,-33,62,-30,-31,62,62,-38,-39,-42,-41,-11,62,-74,-75,-11,-11,-44,-45,-11,]),'GT':([25,27,35,36,37,38,39,40,68,71,73,74,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,107,115,117,118,119,120,122,123,124,125,126,127,134,135,137,138,140,141,146,147,148,149,151,152,154,],[-77,63,-64,-65,-66,-67,-68,-69,63,63,-61,-62,63,63,-47,-48,-49,-50,-51,-52,63,63,None,None,None,None,63,63,63,63,-63,-70,-11,63,-71,-76,63,-35,-36,-33,63,-30,-31,63,63,-38,-39,-42,-41,-11,63,-74,-75,-11,-11,-44,-45,-11,]),'GE':([25,27,35,36,37,38,39,40,68,71,73,74,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,107,115,117,118,119,120,122,123,124,125,126,127,134,135,137,138,140,141,146,147,148,149,151,152,154,],[-77,64,-64,-65,-66,-67,-68,-69,64,64,-61,-62,64,64,-47,-48,-49,-50,-51,-52,64,64,None,None,None,None,64,64,64,64,-63,-70,-11,64,-71,-76,64,-35,-36,-33,64,-30,-31,64,64,-38,-39,-42,-41,-11,64,-74,-75,-11,-11,-44,-45,-11,]),'AND':([25,27,35,36,37,38,39,40,68,71,73,74,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,107,115,117,118,119,120,122,123,124,125,126,127,134,135,137,138,140,141,146,147,148,149,151,152,154,],[-77,65,-64,-65,-66,-67,-68,-69,65,65,-61,-62,65,65,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,65,65,65,-63,-70,-11,65,-71,-76,65,-35,-36,-33,65,-30,-31,65,65,-38,-39,-42,-41,-11,65,-74,-75,-11,-11,-44,-45,-11,]),'OR':([25,27,35,36,37,38,39,40,68,71,73,74,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,107,115,117,118,119,120,122,123,124,125,126,127,134,135,137,138,140,141,146,147,148,149,151,152,154,],[-77,66,-64,-65,-66,-67,-68,-69,66,66,-61,-62,66,66,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,66,66,-63,-70,-11,66,-71,-76,66,-35,-36,-33,66,-30,-31,66,66,-38,-39,-42,-41,-11,66,-74,-75,-11,-11,-44,-45,-11,]),'SEMICOLON':([25,26,27,28,29,34,35,36,37,38,39,40,42,43,44,70,71,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,102,103,104,106,107,112,113,114,115,117,118,119,120,122,124,125,126,134,135,137,138,140,146,147,148,149,151,152,154,],[-77,-5,-6,-7,-8,-15,-64,-65,-66,-67,-68,-69,76,-13,-14,-15,-16,-61,-62,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-63,-70,-11,-12,-16,-4,-9,-10,-71,-76,-34,-35,-36,-33,-30,-31,-32,-38,-39,-42,-41,-11,-74,-75,-11,-11,-44,-45,-11,]),'THEN':([25,35,36,37,38,39,40,68,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,102,103,104,115,117,118,119,120,122,124,125,126,134,135,137,138,140,146,147,148,149,151,152,154,],[-77,-64,-65,-66,-67,-68,-69,99,-61,-62,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-63,-70,-11,-71,-76,-34,-35,-36,-33,-30,-31,-32,-38,-39,-42,-41,-11,-74,-75,-11,-11,-44,-45,-11,]),'DO':([25,35,36,37,38,39,40,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,102,103,104,115,117,118,119,120,122,124,125,126,134,135,137,138,140,146,147,148,149,151,152,154,],[-77,-64,-65,-66,-67,-68,-69,-61,-62,108,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-63,-70,-11,-71,-76,-34,-35,-36,-33,-30,-31,-32,-38,-39,-42,-41,-11,-74,-75,-11,-11,-44,-45,-11,]),'ELSE':([25,35,36,37,38,39,40,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,102,103,104,115,117,118,119,120,122,124,125,126,134,135,137,138,140,146,147,148,149,151,152,154,],[-77,-64,-65,-66,-67,-68,-69,-61,-62,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-63,-70,-11,-71,-76,-34,129,130,-33,-30,-31,-32,-38,-39,-42,-41,145,-74,-75,-11,-11,-44,-45,-11,]),'PIPE':([25,35,36,37,38,39,40,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,102,103,104,115,117,118,119,120,122,123,124,125,126,134,135,137,138,140,146,147,148,149,151,152,154,],[-77,-64,-65,-66,-67,-68,-69,-61,-62,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-63,-70,-11,-71,-76,-34,-35,-36,-33,132,-30,-31,-32,-38,-39,-42,-41,-11,-74,-75,-11,-11,-44,-45,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([0,3,],[2,5,]),'declaration':([0,3,18,31,76,81,111,121,136,139,150,],[3,3,44,44,44,44,44,44,44,44,44,]),'params':([7,],[10,]),'param_list':([7,16,],[11,23,]),'empty':([7,],[12,]),'type':([8,15,20,24,41,50,],[14,22,48,51,75,22,]),'type_list':([15,50,],[21,80,]),'var_body':([18,],[26,]),'expression':([18,30,31,32,33,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,81,99,105,108,109,110,111,116,121,129,130,132,136,139,145,150,],[27,68,71,73,74,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,107,107,118,123,118,126,127,71,83,71,118,118,141,71,71,118,71,]),'block':([18,81,99,108,129,130,145,],[28,114,120,125,135,137,152,]),'statement_list':([18,31,76,81,111,121,136,139,150,],[29,72,106,113,72,131,143,144,153,]),'command':([18,31,69,76,81,99,108,111,121,129,130,132,136,139,145,150,],[34,70,100,34,34,122,122,70,70,122,122,142,70,70,122,70,]),'statement':([18,31,76,81,111,121,136,139,150,],[42,42,42,42,42,42,42,42,42,]),'statement_no_semicolon':([18,31,76,81,111,121,136,139,150,],[43,43,43,43,43,43,43,43,43,]),'lvalue':([46,],[78,]),'args':([52,116,],[82,128,]),'fun_body':([81,],[112,]),'simple_expr':([99,108,129,130,145,],[119,124,134,138,151,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations','program',1,'p_program','parser.py',27),
  ('declarations -> declaration declarations','declarations',2,'p_declarations','parser.py',32),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',33),
  ('declaration -> LET ID LPAREN params RPAREN COLON type ASSIGN fun_body','declaration',9,'p_declaration_fun','parser.py',40),
  ('declaration -> LET ID COLON type ASSIGN var_body','declaration',6,'p_declaration_var','parser.py',48),
  ('var_body -> expression','var_body',1,'p_var_body_expr','parser.py',56),
  ('var_body -> block','var_body',1,'p_var_body_block','parser.py',60),
  ('var_body -> statement_list','var_body',1,'p_var_body_statements','parser.py',64),
  ('fun_body -> statement_list','fun_body',1,'p_fun_body','parser.py',70),
  ('fun_body -> block','fun_body',1,'p_fun_body','parser.py',71),
  ('block -> LPAREN statement_list RPAREN','block',3,'p_block','parser.py',80),
  ('statement_list -> statement SEMICOLON statement_list','statement_list',3,'p_statement_list','parser.py',93),
  ('statement_list -> statement_no_semicolon','statement_list',1,'p_statement_list','parser.py',94),
  ('statement -> declaration','statement',1,'p_statement','parser.py',102),
  ('statement -> command','statement',1,'p_statement','parser.py',103),
  ('statement -> expression','statement',1,'p_statement','parser.py',104),
  ('statement_no_semicolon -> declaration','statement_no_semicolon',1,'p_statement_no_semicolon','parser.py',108),
  ('statement_no_semicolon -> command','statement_no_semicolon',1,'p_statement_no_semicolon','parser.py',109),
  ('statement_no_semicolon -> expression','statement_no_semicolon',1,'p_statement_no_semicolon','parser.py',110),
  ('params -> param_list','params',1,'p_params','parser.py',116),
  ('params -> empty','params',1,'p_params','parser.py',117),
  ('param_list -> ID COMMA param_list','param_list',3,'p_param_list','parser.py',121),
  ('param_list -> ID','param_list',1,'p_param_list','parser.py',122),
  ('type -> ID','type',1,'p_type','parser.py',130),
  ('type -> type LBRACK RBRACK','type',3,'p_type_array','parser.py',138),
  ('type -> type ARROW type','type',3,'p_type_func','parser.py',142),
  ('type -> LPAREN type_list RPAREN','type',3,'p_type_paren_list','parser.py',147),
  ('type_list -> type COMMA type_list','type_list',3,'p_type_list','parser.py',151),
  ('type_list -> type','type_list',1,'p_type_list','parser.py',152),
  ('command -> WHILE expression DO simple_expr','command',4,'p_command','parser.py',160),
  ('command -> WHILE expression DO block','command',4,'p_command','parser.py',161),
  ('command -> SET lvalue ASSIGN expression','command',4,'p_command','parser.py',162),
  ('simple_expr -> command','simple_expr',1,'p_simple_expr_command','parser.py',171),
  ('simple_expr -> expression','simple_expr',1,'p_simple_expr_expression','parser.py',175),
  ('expression -> IF expression THEN simple_expr','expression',4,'p_expression_if','parser.py',181),
  ('expression -> IF expression THEN block','expression',4,'p_expression_if','parser.py',182),
  ('expression -> IF expression THEN LPAREN statement_list RPAREN','expression',6,'p_expression_if','parser.py',183),
  ('expression -> IF expression THEN simple_expr ELSE simple_expr','expression',6,'p_expression_if','parser.py',184),
  ('expression -> IF expression THEN simple_expr ELSE block','expression',6,'p_expression_if','parser.py',185),
  ('expression -> IF expression THEN simple_expr ELSE LPAREN statement_list RPAREN','expression',8,'p_expression_if','parser.py',186),
  ('expression -> IF expression THEN block ELSE simple_expr','expression',6,'p_expression_if','parser.py',187),
  ('expression -> IF expression THEN block ELSE block','expression',6,'p_expression_if','parser.py',188),
  ('expression -> IF expression THEN block ELSE LPAREN statement_list RPAREN','expression',8,'p_expression_if','parser.py',189),
  ('expression -> IF expression THEN LPAREN statement_list RPAREN ELSE simple_expr','expression',8,'p_expression_if','parser.py',190),
  ('expression -> IF expression THEN LPAREN statement_list RPAREN ELSE block','expression',8,'p_expression_if','parser.py',191),
  ('expression -> IF expression THEN LPAREN statement_list RPAREN ELSE LPAREN statement_list RPAREN','expression',10,'p_expression_if','parser.py',192),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',199),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',200),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',201),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',202),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','parser.py',203),
  ('expression -> expression POW expression','expression',3,'p_expression_binop','parser.py',204),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',205),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','parser.py',206),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',207),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',208),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',209),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',210),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',211),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',212),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','parser.py',218),
  ('expression -> NOT expression','expression',2,'p_expression_unary','parser.py',219),
  ('expression -> LPAREN command RPAREN','expression',3,'p_expression_command_paren','parser.py',226),
  ('expression -> INT_LITERAL','expression',1,'p_expression_literals','parser.py',231),
  ('expression -> STRING_LITERAL','expression',1,'p_expression_literals','parser.py',232),
  ('expression -> TRUE','expression',1,'p_expression_literals','parser.py',233),
  ('expression -> FALSE','expression',1,'p_expression_literals','parser.py',234),
  ('expression -> UNIT','expression',1,'p_expression_literals','parser.py',235),
  ('expression -> NULL','expression',1,'p_expression_literals','parser.py',236),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','parser.py',254),
  ('expression -> ID LPAREN args RPAREN','expression',4,'p_expression_call','parser.py',258),
  ('args -> expression COMMA args','args',3,'p_args','parser.py',264),
  ('args -> expression','args',1,'p_args','parser.py',265),
  ('expression -> NEW type LBRACK expression PIPE expression RBRACK','expression',7,'p_expression_new_array_expr','parser.py',272),
  ('expression -> NEW type LBRACK expression PIPE command RBRACK','expression',7,'p_expression_new_array_block','parser.py',276),
  ('expression -> expression LBRACK expression RBRACK','expression',4,'p_expression_array_access','parser.py',281),
  ('expression -> ID','expression',1,'p_expression_var','parser.py',287),
  ('lvalue -> ID','lvalue',1,'p_lvalue_var','parser.py',294),
  ('lvalue -> lvalue LBRACK expression RBRACK','lvalue',4,'p_lvalue_array_access','parser.py',300),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',305),
]
