-- Author: tcomp56311, JoÃ£o Vedor

let identity(n) : Int -> Int[][] =
    let matrix : Int[][] = new Int[][n|new Int[n|0]];
    let i : Int = 0;
    while i < n do (
        set matrix[i][i] = 1;
        set i = i + 1
    );
    matrix

let matVecMult(mat, vec) : (Int[][], Int[]) -> Int[] =
    if length(mat[0]) != length(vec) then 
        print("Dimensions don't match");  -- Add error handling
    let result : Int[] = new Int[length(vec)|0];
    let i : Int = 0;
    while i < length(mat) do (
        let j : Int = 0;
        while j < length(mat[0]) do (
            set result[i] = result[i] + mat[i][j] * vec[j];
            set j = j + 1
        );
        set i = i + 1
    );
    result

-- Helper function to print arrays
let printArray(arr) : Int[] -> Unit =
    let i : Int = 0;
    print("[");
    while i < length(arr) do (
        print(arr[i]);
        if i < length(arr) - 1 then print(", ");
        set i = i + 1
    );
    print("]")

let main(_) : Unit -> Unit =
    let ind_matrix : Int[][] = identity(10);
    let test_vec : Int[] = new Int[10|1];  -- Vector of 1s
    printArray(matVecMult(ind_matrix, test_vec))