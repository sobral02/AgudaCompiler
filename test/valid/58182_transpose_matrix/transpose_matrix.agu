-- Author: 58182, Gabriel Henriques

-- Function that has two modes:
-- Mode true: Prints the Matrix
-- Mode false: Fills the Matrix with numbers [1..n]
let printOrFillMatrix (matrix, mode) : (Int[][], Bool) -> Unit =
    let num : Int = 1 ;
    let i : Int = 0 ;
    while i < length(matrix) do (
        let j : Int = 0 ;
        while j < length(matrix[0]) do (
            -- Print mode
            if mode then (
                print(matrix[i][j]) ;
                print(" ")
            )
            -- Fill mode
            else (
                set matrix[i][j] = num ;
                set num = num + 1
            ) ;
            set j = j + 1
        ) ; 
        if mode then (
            print("\n")
        ) ;
        set i = i + 1
    )

-- Function to transpose a matrix
let transposeMatrix (matrix) : Int[][] -> Int[][] =
  let rows : Int = length(matrix) ;
  let cols : Int = length(matrix[0]) ;
  let transposed : Int[][] = new Int[][cols | new Int[rows | 0]] ;
  let i : Int = 0 ;
  while i < rows do (
    let j : Int = 0 ;
    while j < cols do (
      set transposed[j][i] = matrix[i][j] ;
      set j = j + 1
    ) ;
    set i = i + 1
  ) ;
  transposed

let main : Unit =
    let n : Int = 3 ;
    let matrix : Int[][] = new Int[][n | new Int[n | 0]] ;
    printOrFillMatrix(matrix, false) ;
    let transposedMatrix : Int[][] = transposeMatrix(matrix) ;
    printOrFillMatrix(matrix, true)

    




